import os
import telebot
import sqlite3
import time
import csv
from telebot import types
from flask import Flask, request
from datetime import datetime

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = "8109304672:AAHkOQ8kzQLmHupii78YCd-1Q4HtDKWuuNk"
ADMIN_CHAT_ID = "866964827"
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# === –ë–ê–ó–ê –î–ê–ù–ù–´–• ===
def init_db():
    conn = sqlite3.connect('database.db')
    c = conn.cursor()
    
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (chat_id INTEGER PRIMARY KEY, 
                  username TEXT, 
                  first_name TEXT, 
                  last_name TEXT, 
                  gender TEXT, 
                  age TEXT, 
                  registration_date TEXT,
                  completed INTEGER DEFAULT 0)''')
    
    c.execute('''CREATE TABLE IF NOT EXISTS ratings
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  chat_id INTEGER,
                  track_number INTEGER,
                  rating INTEGER,
                  timestamp TEXT,
                  FOREIGN KEY(chat_id) REFERENCES users(chat_id))''')
    
    conn.commit()
    conn.close()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

def save_user(chat_id, username, first_name, last_name, gender, age):
    conn = sqlite3.connect('database.db')
    c = conn.cursor()
    
    c.execute("SELECT * FROM users WHERE chat_id = ?", (chat_id,))
    if c.fetchone() is None:
        c.execute("INSERT INTO users (chat_id, username, first_name, last_name, gender, age, registration_date) VALUES (?, ?, ?, ?, ?, ?, ?)",
                  (chat_id, username, first_name, last_name, gender, age, datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
    else:
        c.execute("UPDATE users SET username=?, first_name=?, last_name=?, gender=?, age=? WHERE chat_id=?",
                  (username, first_name, last_name, gender, age, chat_id))
    
    conn.commit()
    conn.close()

def save_rating(chat_id, track_number, rating):
    conn = sqlite3.connect('database.db')
    c = conn.cursor()
    
    c.execute("SELECT * FROM ratings WHERE chat_id = ? AND track_number = ?", (chat_id, track_number))
    if c.fetchone() is None:
        c.execute("INSERT INTO ratings (chat_id, track_number, rating, timestamp) VALUES (?, ?, ?, ?)",
                  (chat_id, track_number, rating, datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
        
        c.execute("SELECT COUNT(*) FROM ratings WHERE chat_id = ?", (chat_id,))
        rated_count = c.fetchone()[0]
        
        if rated_count >= 30:
            c.execute("UPDATE users SET completed = 1 WHERE chat_id = ?", (chat_id,))
            try:
                c.execute("SELECT username, first_name FROM users WHERE chat_id = ?", (chat_id,))
                user_info = c.fetchone()
                username = user_info[0] or user_info[1] or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                bot.send_message(ADMIN_CHAT_ID, f"üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –∑–∞–≤–µ—Ä—à–∏–ª —Ç–µ—Å—Ç!")
            except:
                pass
    
    conn.commit()
    conn.close()

def get_user_progress(chat_id):
    conn = sqlite3.connect('database.db')
    c = conn.cursor()
    
    c.execute("SELECT COUNT(*) FROM ratings WHERE chat_id = ?", (chat_id,))
    progress = c.fetchone()[0]
    
    conn.close()
    return progress

def has_user_completed(chat_id):
    conn = sqlite3.connect('database.db')
    c = conn.cursor()
    
    c.execute("SELECT completed FROM users WHERE chat_id = ?", (chat_id,))
    result = c.fetchone()
    
    conn.close()
    return result and result[0] == 1

# === –≠–ö–°–ü–û–†–¢ –í EXCEL ===
def export_to_excel():
    conn = sqlite3.connect('database.db')
    
    # –°–æ–∑–¥–∞–µ–º CSV —Ñ–∞–π–ª—ã
    with open('users_export.csv', 'w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow(['User ID', 'Username', 'First Name', 'Last Name', 'Gender', 'Age', 'Registration Date', 'Completed'])
        
        c = conn.cursor()
        c.execute("SELECT * FROM users")
        for row in c.fetchall():
            writer.writerow(row)
    
    with open('ratings_export.csv', 'w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow(['ID', 'User ID', 'Track Number', 'Rating', 'Timestamp'])
        
        c = conn.cursor()
        c.execute("SELECT * FROM ratings")
        for row in c.fetchall():
            writer.writerow(row)
    
    conn.close()
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º CSV –≤ XLSX (–ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–±)
    import pandas as pd
    try:
        users_df = pd.read_csv('users_export.csv')
        ratings_df = pd.read_csv('ratings_export.csv')
        
        with pd.ExcelWriter('results.xlsx') as writer:
            users_df.to_excel(writer, sheet_name='Users', index=False)
            ratings_df.to_excel(writer, sheet_name='Ratings', index=False)
        
        return True
    except:
        # –ï—Å–ª–∏ pandas –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º CSV
        return False

# === –°–ü–ò–°–û–ö –¢–†–ï–ö–û–í ===
track_numbers = [f"{str(i).zfill(3)}" for i in range(1, 31)]

# === –•–†–ê–ù–ò–õ–ò–©–ï –î–õ–Ø –£–î–ê–õ–ï–ù–ò–Ø –°–û–û–ë–©–ï–ù–ò–ô ===
user_last_message = {}

# === –°–û–û–ë–©–ï–ù–ò–ï –° –†–ê–°–®–ò–§–†–û–í–ö–û–ô –û–¶–ï–ù–û–ö ===
RATING_GUIDE_MESSAGE = """
üéµ **–®–∫–∞–ª–∞ –æ—Ü–µ–Ω–æ–∫:**

1Ô∏è‚É£ ‚òÖ - –°–æ–≤—Å–µ–º –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è
2Ô∏è‚É£ ‚òÖ‚òÖ - –°–∫–æ—Ä–µ–µ –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è  
3Ô∏è‚É£ ‚òÖ‚òÖ‚òÖ - –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ
4Ô∏è‚É£ ‚òÖ‚òÖ‚òÖ‚òÖ - –ù—Ä–∞–≤–∏—Ç—Å—è
5Ô∏è‚É£ ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ - –û—á–µ–Ω—å –Ω—Ä–∞–≤–∏—Ç—Å—è

–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞:
"""

# === –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î ===
@bot.message_handler(commands=['start'])
def handle_start(message):
    chat_id = message.chat.id
    user = message.from_user
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    cleanup_chat(chat_id)
    
    save_user(chat_id, user.username, user.first_name, user.last_name, "", "")
    
    if has_user_completed(chat_id):
        send_message(chat_id, "üéâ –í—ã —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ç–µ—Å—Ç! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ.")
        return
    
    progress = get_user_progress(chat_id)
    
    if progress > 0:
        send_message(chat_id, f"–ü—Ä–æ–¥–æ–ª–∂–∏–º —Ç–µ—Å—Ç! üéµ (–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}/30)")
        send_track(chat_id, progress)
    else:
        remove_kb = types.ReplyKeyboardRemove()
        send_message(chat_id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç!", reply_markup=remove_kb)

        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", callback_data="start_test"))
        
        welcome_text = (
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üéµ\n\n"
            "–í—ã –ø—Ä–æ—Å–ª—É—à–∞–µ—Ç–µ 30 –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ –∏ –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞–∂–¥—ã–π –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5.\n\n"
            "üéÅ –ü–æ—Å–ª–µ —Ç–µ—Å—Ç–∞ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±—É–¥–µ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à –ø–æ–¥–∞—Ä–∫–æ–≤!"
        )
        
        send_message(chat_id, welcome_text, reply_markup=kb)

# === –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò –ò –°–û–•–†–ê–ù–ï–ù–ò–Ø –°–û–û–ë–©–ï–ù–ò–ô ===
def send_message(chat_id, text, reply_markup=None, parse_mode=None):
    try:
        msg = bot.send_message(chat_id, text, reply_markup=reply_markup, parse_mode=parse_mode)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if chat_id not in user_last_message:
            user_last_message[chat_id] = []
        user_last_message[chat_id].append(msg.message_id)
        return msg
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# === –û–ß–ò–°–¢–ö–ê –ß–ê–¢–ê ===
def cleanup_chat(chat_id):
    if chat_id in user_last_message:
        try:
            for msg_id in user_last_message[chat_id]:
                try:
                    bot.delete_message(chat_id, msg_id)
                except:
                    pass
            user_last_message[chat_id] = []
        except:
            pass

@bot.callback_query_handler(func=lambda call: call.data == 'start_test')
def handle_start_button(call):
    chat_id = call.message.chat.id
    try:
        bot.delete_message(chat_id, call.message.message_id)
    except:
        pass
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    cleanup_chat(chat_id)
    
    ask_gender(chat_id)

# === –í–´–ë–û–† –ü–û–õ–ê –ò –í–û–ó–†–ê–°–¢–ê ===
def ask_gender(chat_id):
    kb = types.InlineKeyboardMarkup()
    kb.add(
        types.InlineKeyboardButton("–ú—É–∂—Å–∫–æ–π", callback_data="gender_–ú—É–∂—Å–∫–æ–π"),
        types.InlineKeyboardButton("–ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_–ñ–µ–Ω—Å–∫–∏–π")
    )
    send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data.startswith("gender_"))
def handle_gender(c):
    chat_id = c.message.chat.id
    gender = c.data.split('_', 1)[1]
    
    conn = sqlite3.connect('database.db')
    cur = conn.cursor()
    cur.execute("UPDATE users SET gender = ? WHERE chat_id = ?", (gender, chat_id))
    conn.commit()
    conn.close()
    
    try:
        bot.delete_message(chat_id, c.message.message_id)
    except:
        pass
    
    # –û—á–∏—â–∞–µ–º —á–∞—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º
    cleanup_chat(chat_id)
    ask_age(chat_id)

def ask_age(chat_id):
    opts = ["–¥–æ 24", "25-34", "35-44", "45-54", "55+"]
    kb = types.InlineKeyboardMarkup(row_width=2)
    buttons = [types.InlineKeyboardButton(o, callback_data=f"age_{o}") for o in opts]
    kb.add(*buttons)
    send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data.startswith("age_"))
def handle_age(c):
    chat_id = c.message.chat.id
    age = c.data.split('_', 1)[1]
    
    conn = sqlite3.connect('database.db')
    cur = conn.cursor()
    cur.execute("UPDATE users SET age = ? WHERE chat_id = ?", (age, chat_id))
    conn.commit()
    conn.close()
    
    try:
        bot.delete_message(chat_id, c.message.message_id)
    except:
        pass
    
    # –û—á–∏—â–∞–µ–º —á–∞—Ç –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ç–µ—Å—Ç–∞
    cleanup_chat(chat_id)
    
    conn = sqlite3.connect('database.db')
    cur = conn.cursor()
    cur.execute("SELECT username, first_name FROM users WHERE chat_id = ?", (chat_id,))
    user_info = cur.fetchone()
    conn.close()
    
    username_display = f"@{user_info[0]}" if user_info[0] else user_info[1]
    
    send_message(
        chat_id, 
        f"–°–ø–∞—Å–∏–±–æ, {username_display}! üé∂\n\n"
        "–¢–µ–ø–µ—Ä—å –Ω–∞—á–Ω–µ–º —Å–ª–µ–ø–æ–π —Ç–µ—Å—Ç. –£–¥–∞—á–∏ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ! üéÅ"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É –æ—Ü–µ–Ω–æ–∫ –æ–¥–∏–Ω —Ä–∞–∑ –≤ –Ω–∞—á–∞–ª–µ
    send_message(chat_id, RATING_GUIDE_MESSAGE, parse_mode='Markdown')
    
    send_track(chat_id, 0)

# === –û–¢–ü–†–ê–í–ö–ê –¢–†–ï–ö–ê ===
def send_track(chat_id, track_index):
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫—Ä–æ–º–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –æ—Ü–µ–Ω–æ–∫
    cleanup_chat(chat_id)
    
    if track_index >= len(track_numbers):
        conn = sqlite3.connect('database.db')
        cur = conn.cursor()
        cur.execute("SELECT username, first_name FROM users WHERE chat_id = ?", (chat_id,))
        user_info = cur.fetchone()
        conn.close()
        
        username_display = f"@{user_info[0]}" if user_info[0] else user_info[1]
        
        send_message(
            chat_id, 
            f"üéâ {username_display}, —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!\n\n"
            "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –ø–æ–¥–∞—Ä–∫–æ–≤! üéÅ"
        )
        return
    
    track_number = track_numbers[track_index]
    track_filename = f"{track_number}.mp3"
    track_path = os.path.join("tracks", track_filename)
    
    kb = types.InlineKeyboardMarkup(row_width=5)
    buttons = [types.InlineKeyboardButton(str(i), callback_data=f"rate_{track_number}_{i}") for i in range(1, 6)]
    kb.add(*buttons)
    
    if os.path.exists(track_path):
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞
            progress_text = send_message(chat_id, f"üéµ –¢—Ä–µ–∫ {track_index + 1}/30")
            
            with open(track_path, 'rb') as audio_file:
                audio_msg = bot.send_audio(chat_id, audio_file, title=f"–¢—Ä–µ–∫ {track_number}", reply_markup=kb)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
                if chat_id not in user_last_message:
                    user_last_message[chat_id] = []
                user_last_message[chat_id].append(audio_msg.message_id)
                
        except Exception as e:
            send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–µ–∫–∞: {e}")
            send_track(chat_id, track_index + 1)
    else:
        send_message(chat_id, f"‚ö†Ô∏è –¢—Ä–µ–∫ {track_number} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        send_track(chat_id, track_index + 1)

# === –û–ë–†–ê–ë–û–¢–ö–ê –û–¶–ï–ù–ö–ò ===
user_rating_time = {}

@bot.callback_query_handler(func=lambda c: c.data.startswith("rate_"))
def handle_rating(c):
    chat_id = c.message.chat.id
    data_parts = c.data.split('_')
    
    if len(data_parts) != 3:
        return
    
    track_number = data_parts[1]
    rating = int(data_parts[2])
    
    current_time = time.time()
    last_rating_time = user_rating_time.get(chat_id, 0)
    
    if current_time - last_rating_time < 5:
        bot.answer_callback_query(c.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ—Å–ª—É—à–∞–π—Ç–µ —Ç—Ä–µ–∫ –ø–µ—Ä–µ–¥ –æ—Ü–µ–Ω–∫–æ–π")
        return
    
    user_rating_time[chat_id] = current_time
    
    track_num = int(track_number)
    save_rating(chat_id, track_num, rating)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    try:
        bot.delete_message(chat_id, c.message.message_id)
    except:
        pass
    
    # –û—á–∏—â–∞–µ–º —á–∞—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ç—Ä–µ–∫–æ–º (–∫—Ä–æ–º–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –æ—Ü–µ–Ω–æ–∫)
    cleanup_chat(chat_id)
    
    # –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ - —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç—Ä–µ–∫—É
    
    next_track_index = get_user_progress(chat_id)
    send_track(chat_id, next_track_index)

# === –°–õ–£–ñ–ï–ë–ù–´–ï –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê ===
@bot.message_handler(commands=['stats'])
def show_stats(message):
    if str(message.chat.id) != ADMIN_CHAT_ID:
        return
    
    conn = sqlite3.connect('database.db')
    c = conn.cursor()
    
    c.execute("SELECT COUNT(*) FROM users")
    total_users = c.fetchone()[0]
    
    c.execute("SELECT COUNT(*) FROM users WHERE completed = 1")
    completed_users = c.fetchone()[0]
    
    c.execute("SELECT gender, COUNT(*) FROM users WHERE gender != '' GROUP BY gender")
    gender_stats = c.fetchall()
    
    c.execute("SELECT age, COUNT(*) FROM users WHERE age != '' GROUP BY age")
    age_stats = c.fetchall()
    
    conn.close()
    
    stats_text = f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–∞:
    
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:
‚Ä¢ –í—Å–µ–≥–æ: {total_users}
‚Ä¢ –ó–∞–≤–µ—Ä—à–∏–ª–∏ —Ç–µ—Å—Ç: {completed_users}
‚Ä¢ –í –ø—Ä–æ—Ü–µ—Å—Å–µ: {total_users - completed_users}

üöª –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–æ–ª—É:"""
    
    for gender, count in gender_stats:
        stats_text += f"\n‚Ä¢ {gender}: {count}"
    
    stats_text += "\n\nüéÇ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É:"
    for age, count in age_stats:
        stats_text += f"\n‚Ä¢ {age}: {count}"
    
    bot.send_message(ADMIN_CHAT_ID, stats_text)

@bot.message_handler(commands=['backup'])
def backup_database(message):
    if str(message.chat.id) != ADMIN_CHAT_ID:
        return
    
    try:
        with open("database.db", "rb") as f:
            bot.send_document(ADMIN_CHAT_ID, f, caption="üîê –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        bot.send_message(ADMIN_CHAT_ID, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞: {e}")

@bot.message_handler(commands=['results'])
def export_results(message):
    if str(message.chat.id) != ADMIN_CHAT_ID:
        return
    
    try:
        success = export_to_excel()
        if success:
            with open("results.xlsx", "rb") as f:
                bot.send_document(ADMIN_CHAT_ID, f, caption="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Excel")
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º CSV –µ—Å–ª–∏ Excel –Ω–µ –ø–æ–ª—É—á–∏–ª—Å—è
            with open("users_export.csv", "rb") as f1, open("ratings_export.csv", "rb") as f2:
                bot.send_document(ADMIN_CHAT_ID, f1, caption="üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (CSV)")
                bot.send_document(ADMIN_CHAT_ID, f2, caption="üìà –û—Ü–µ–Ω–∫–∏ (CSV)")
    except Exception as e:
        bot.send_message(ADMIN_CHAT_ID, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}")

# === FLASK WEBHOOK ===
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_str = request.get_data().decode('UTF-8')
        update = telebot.types.Update.de_json(json_str)
        bot.process_new_updates([update])
        return "ok", 200
    return "Bad Request", 400

@app.route("/", methods=["GET"])
def index():
    return "–°–ª–µ–ø–æ–π –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! üéµ", 200

# === –ó–ê–ü–£–°–ö ===
if __name__ == "__main__":
    init_db()
    
    try:
        bot.send_message(ADMIN_CHAT_ID, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    except:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    
    port = int(os.environ.get("PORT", 5000))
    
    if not os.environ.get("DEBUG"):
        bot.remove_webhook()
        bot.set_webhook(url=f"https://musicbot-knqj.onrender.com/{TOKEN}")
    
    app.run(host="0.0.0.0", port=port, debug=os.environ.get("DEBUG"))
