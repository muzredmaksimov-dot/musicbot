import telebot
from telebot import types
import csv
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import os

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = "–¢–í–û–ô_–¢–û–ö–ï–ù"
AUDIO_FOLDER = "audio"
SPREADSHEET_NAME = "music_testing"
WORKSHEET_NAME = "track_list"
PROGRESS_FILE = "progress.csv"

# === Google Sheets –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ===
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("creds.json", scope)
client = gspread.authorize(creds)
sheet = client.open(SPREADSHEET_NAME).worksheet(WORKSHEET_NAME)

# === –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ CSV –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ ===
if not os.path.exists(PROGRESS_FILE):
    with open(PROGRESS_FILE, "w", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow(["chat_id", "track_number", "score"])

# === –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤ ===
with open("track_list.csv", newline="", encoding="utf-8") as f:
    reader = csv.DictReader(f)
    track_data = {row["track_number"]: row["title"] for row in reader}

# === –ë–æ—Ç ===
bot = telebot.TeleBot(TOKEN)

# === –°–ª–æ–≤–∞—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è ===
user_progress = {}     # –∫–∞–∫–æ–π —Ç—Ä–µ–∫ —É –∫–æ–≥–æ —Å–µ–π—á–∞—Å
user_rated_tracks = {} # —á—Ç–æ —É–∂–µ –æ—Ü–µ–Ω–µ–Ω–æ
user_metadata = {}     # –ø–æ–ª/–≤–æ–∑—Ä–∞—Å—Ç
last_audios = {}       # id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞—É–¥–∏–æ

# === –í—Å–ø–æ–º–æ–≥–∞–ª–∫–∏ ===
def save_progress_csv(chat_id, track_number, score):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—É—é –æ—Ü–µ–Ω–∫—É –≤ CSV"""
    with open(PROGRESS_FILE, "a", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow([chat_id, track_number, score])

def upload_results_to_google():
    """–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –ø–µ—Ä–µ–Ω–æ—Å–∏–º CSV –≤ Google Sheets"""
    with open(PROGRESS_FILE, "r", encoding="utf-8") as f:
        reader = csv.DictReader(f)
        data = list(reader)

    if not data:
        return

    headers = ["chat_id", "track_number", "score"]
    sheet.clear()
    sheet.append_row(headers)
    for row in data:
        sheet.append_row([row["chat_id"], row["track_number"], row["score"]])

# === /results –∫–æ–º–∞–Ω–¥–∞ ===
@bot.message_handler(commands=["results"])
def send_results(m):
    chat_id = m.chat.id
    if os.path.exists(PROGRESS_FILE):
        with open(PROGRESS_FILE, "rb") as f:
            bot.send_document(chat_id, f)
    else:
        bot.send_message(chat_id, "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∫–∞ –ø—É—Å—Ç—ã.")

# === –û–ø—Ä–æ—Å –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º ===
@bot.message_handler(func=lambda message: message.chat.id not in user_metadata)
def welcome_handler(message):
    chat_id = message.chat.id
    remove_kb = types.ReplyKeyboardRemove()
    bot.send_message(chat_id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç!", reply_markup=remove_kb)

    welcome_text = (
        "–¢—ã —É—Å–ª—ã—à–∏—à—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ç—Ä–µ–∫–æ–≤. "
        "–û—Ü–µ–Ω–∏ –∫–∞–∂–¥—ã–π –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5.\n\n"
        "–ù–æ —Å–Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è üôÇ"
    )

    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å", callback_data="start_test"))
    bot.send_message(chat_id, welcome_text, reply_markup=kb)
    user_metadata[chat_id] = None

@bot.callback_query_handler(func=lambda call: call.data == "start_test")
def handle_start_button(call):
    chat_id = call.message.chat.id
    bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=None)

    user_metadata[chat_id] = {}
    user_progress[chat_id] = 0
    user_rated_tracks[chat_id] = set()
    ask_gender(chat_id)

def ask_gender(chat_id):
    kb = types.InlineKeyboardMarkup()
    kb.add(
        types.InlineKeyboardButton("–ú—É–∂—Å–∫–æ–π", callback_data="gender_M"),
        types.InlineKeyboardButton("–ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_F"),
    )
    bot.send_message(chat_id, "–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data.startswith("gender_"))
def handle_gender(c):
    chat_id = c.message.chat.id
    user_metadata[chat_id] = {"gender": c.data.split("_", 1)[1]}
    try:
        bot.delete_message(chat_id, c.message.message_id)
    except Exception:
        pass
    ask_age(chat_id)

def ask_age(chat_id):
    opts = ["–¥–æ 24", "25-34", "35-44", "45-54", "55+"]
    kb = types.InlineKeyboardMarkup(row_width=3)
    for o in opts:
        kb.add(types.InlineKeyboardButton(o, callback_data=f"age_{o}"))
    bot.send_message(chat_id, "–£–∫–∞–∂–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data.startswith("age_"))
def handle_age(c):
    chat_id = c.message.chat.id
    user_metadata[chat_id]["age"] = c.data.split("_", 1)[1]
    try:
        bot.delete_message(chat_id, c.message.message_id)
    except Exception:
        pass

    user_progress[chat_id] = 1
    bot.send_message(
        chat_id,
        "–û—Ü–µ–Ω–∏ —Ç—Ä–µ–∫ –æ—Ç 1 –¥–æ 5:\n\n"
        "1 ‚Äî –ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è\n"
        "2 ‚Äî –†–∞–Ω—å—à–µ –Ω—Ä–∞–≤–∏–ª–∞—Å—å, –Ω–æ –Ω–∞–¥–æ–µ–ª–∞\n"
        "3 ‚Äî –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ\n"
        "4 ‚Äî –ù—Ä–∞–≤–∏—Ç—Å—è\n"
        "5 ‚Äî –õ—é–±–∏–º–∞—è –ø–µ—Å–Ω—è",
    )
    send_next_track(chat_id)

# === –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–µ–∫–æ–≤ ===
def send_next_track(chat_id):
    n = user_progress.get(chat_id, 1)
    path = os.path.join(AUDIO_FOLDER, f"{n:03}.mp3")
    if not os.path.exists(path):
        bot.send_message(chat_id, "üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –°–æ—Ö—Ä–∞–Ω—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
        upload_results_to_google()
        return

    with open(path, "rb") as f:
        m = bot.send_audio(chat_id, f, caption=f"–¢—Ä–µ–∫ ‚Ññ{n}")
        last_audios[chat_id] = m.message_id

    kb = types.InlineKeyboardMarkup(row_width=5)
    for i in range(1, 6):
        kb.add(types.InlineKeyboardButton(str(i), callback_data=f"rate_{i}"))
    bot.send_message(chat_id, "–û—Ü–µ–Ω–∏—Ç–µ:", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data.startswith("rate_"))
def handle_rate(c):
    chat_id = c.message.chat.id
    n = user_progress.get(chat_id, 1)

    if n in user_rated_tracks[chat_id]:
        bot.answer_callback_query(c.id, "–£–∂–µ –æ—Ü–µ–Ω–µ–Ω–æ", show_alert=True)
        return

    score = c.data.split("_", 1)[1]
    save_progress_csv(chat_id, n, score)
    user_rated_tracks[chat_id].add(n)

    if chat_id in last_audios:
        try:
            bot.delete_message(chat_id, last_audios[chat_id])
        except Exception:
            pass

    try:
        bot.delete_message(chat_id, c.message.message_id)
    except Exception:
        pass

    user_progress[chat_id] = n + 1
    send_next_track(chat_id)

# === –§–æ–ª–±—ç–∫ ===
@bot.message_handler(func=lambda m: True)
def fallback(m):
    bot.send_message(m.chat.id, "–ù–∞–∂–º–∏—Ç–µ /start")

# === –°—Ç–∞—Ä—Ç ===
bot.polling()
