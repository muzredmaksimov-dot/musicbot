import telebot
import csv
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import os
from telebot import types
from datetime import datetime
from flask import Flask, request
import json
import glob

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = '8109304672:AAHkOQ8kzQLmHupii78YCd-1Q4HtDKWuuNk'
AUDIO_FOLDER = 'audio'
SPREADSHEET_NAME = 'music_testing'
WORKSHEET_NAME = 'track_list'

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# === Google Sheets –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ===
scope = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/drive"
]

worksheet = None
track_data = {}         # mapping track_number (str) -> title (from CSV)
MAX_TRACK = 0           # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –æ–∂–∏–¥–∞–µ–º—ã–π –Ω–æ–º–µ—Ä —Ç—Ä–µ–∫–∞ (int)
user_states = {}

# === –§—É–Ω–∫—Ü–∏–∏ ===
def initialize_google_sheets():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google –¢–∞–±–ª–∏—Ü–∞–º.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç env GOOGLE_CREDS_JSON, GOOGLE_CREDS_B64, –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π creds.json.
    """
    global worksheet
    try:
        creds_json_str = os.environ.get('GOOGLE_CREDS_JSON')
        creds_b64 = os.environ.get('GOOGLE_CREDS_B64')

        if creds_json_str:
            creds_dict = json.loads(creds_json_str)
        elif creds_b64:
            import base64
            creds_dict = json.loads(base64.b64decode(creds_b64).decode('utf-8'))
        elif os.path.exists('creds.json'):
            with open('creds.json', 'r', encoding='utf-8') as f:
                creds_dict = json.load(f)
        else:
            print("‚ùå –ù–µ—Ç –∫–ª—é—á–∞ –¥–ª—è Google API: –∑–∞–¥–∞–π—Ç–µ GOOGLE_CREDS_JSON –∏–ª–∏ GOOGLE_CREDS_B64, –∏–ª–∏ –ø–æ–ª–æ–∂–∏—Ç–µ creds.json")
            worksheet = None
            return False

        creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
        client = gspread.authorize(creds)
        spreadsheet = client.open(SPREADSHEET_NAME)
        worksheet = spreadsheet.worksheet(WORKSHEET_NAME)
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Google –¢–∞–±–ª–∏—Ü–µ!")
        return True

    except Exception as e:
        worksheet = None
        print(f"‚ùå –û—à–∏–±–∫–∞ Google Sheets: {e}")
        return False

def load_track_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–µ–∫–∞—Ö –∏–∑ CSV –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ MAX_TRACK"""
    global track_data, MAX_TRACK
    track_data = {}
    MAX_TRACK = 0
    try:
        if not os.path.exists('track_list.csv'):
            print("‚ö†Ô∏è track_list.csv –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø–æ–ø—Ä–æ–±—É—é –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç—Ä–µ–∫–∏ –ø–æ –ø–∞–ø–∫–µ audio")
            if os.path.isdir(AUDIO_FOLDER):
                files = sorted(glob.glob(os.path.join(AUDIO_FOLDER, '*.mp3')))
                for f in files:
                    basename = os.path.basename(f)
                    name, _ = os.path.splitext(basename)
                    # –ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –Ω–æ–º–µ—Ä –∏–∑ –∏–º–µ–Ω–∏ (–ø–µ—Ä–≤—ã–µ —Ü–∏—Ñ—Ä—ã)
                    digits = ''.join(ch for ch in name.split()[0] if ch.isdigit())
                    if digits:
                        try:
                            num = int(digits)
                            track_data[str(num)] = basename
                        except Exception:
                            continue
                MAX_TRACK = max((int(k) for k in track_data.keys()), default=0)
                print(f"‚úÖ –ê–≤—Ç–æ–¥–µ—Ç–µ–∫—Ç: –Ω–∞–π–¥–µ–Ω–æ {len(track_data)} —Ñ–∞–π–ª–æ–≤ –≤ {AUDIO_FOLDER}")
                return True if track_data else False
            return False

        with open('track_list.csv', newline='', encoding='utf-8') as f:
            reader = csv.DictReader(f)
            for row in reader:
                tn = row.get('track_number')
                title = row.get('title', '')
                if tn:
                    tn_stripped = tn.strip()
                    track_data[tn_stripped] = title
            if track_data:
                try:
                    MAX_TRACK = max(int(k) for k in track_data.keys())
                except Exception:
                    MAX_TRACK = len(track_data)
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(track_data)} —Ç—Ä–µ–∫–æ–≤ (MAX_TRACK={MAX_TRACK})")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–æ–≤: {e}")
        track_data = {}
        MAX_TRACK = 0
        return False

def find_audio_file(track_num):
    """–ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –¥–ª—è —Ç—Ä–µ–∫–∞ track_num.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ None.
    –õ–æ–≥–∏–∫–∞:
      - exact formats: 001.mp3, 01.mp3, 1.mp3
      - patterns: '001 - *', '1 - *'
      - check track_data value if it looks like filename
      - glob '*{track_num}*.mp3' as last resort
    """
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–º–µ–Ω–∏
    candidates = [
        os.path.join(AUDIO_FOLDER, f"{track_num:03d}.mp3"),
        os.path.join(AUDIO_FOLDER, f"{track_num:02d}.mp3"),
        os.path.join(AUDIO_FOLDER, f"{track_num}.mp3"),
    ]

    # –µ—Å–ª–∏ –≤ CSV –≤ title —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–æ –∏–º—è —Ñ–∞–π–ª–∞ (—Ä–µ–¥–∫–∏–π —Å–ª—É—á–∞–π) ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º
    title = track_data.get(str(track_num))
    if title:
        # –µ—Å–ª–∏ title –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ —Ñ–∞–π–ª (–æ–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ .mp3) ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º
        if title.lower().endswith('.mp3'):
            candidates.append(os.path.join(AUDIO_FOLDER, title))
        # –µ—Å–ª–∏ title —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–æ–º–µ—Ä –∏/–∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ —Ñ–∞–π–ª "001 - Title.mp3"
        candidates.append(os.path.join(AUDIO_FOLDER, f"{track_num:03d} - {title}.mp3"))
        candidates.append(os.path.join(AUDIO_FOLDER, f"{track_num} - {title}.mp3"))

    # –¥–æ–±–∞–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω—ã glob –¥–ª—è —Å–ª—É—á–∞–µ–≤ "001 Title.mp3" –∏ —Ç.–¥.
    for c in candidates:
        if os.path.exists(c):
            return c

    # glob patterns (–±–æ–ª–µ–µ –æ–±—â–∏–µ)
    patterns = []
    patterns.append(os.path.join(AUDIO_FOLDER, f"{track_num:03d}*.mp3"))
    patterns.append(os.path.join(AUDIO_FOLDER, f"{track_num:02d}*.mp3"))
    patterns.append(os.path.join(AUDIO_FOLDER, f"{track_num}*.mp3"))
    patterns.append(os.path.join(AUDIO_FOLDER, f"*{track_num}*.mp3"))

    for pat in patterns:
        found = glob.glob(pat)
        if found:
            # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π
            return found[0]

    return None

def save_to_google_sheets(user_data, ratings):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Google –¢–∞–±–ª–∏—Ü—É"""
    if not worksheet:
        print("‚ùå Google –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å –≤ Google")
        return False

    try:
        all_data = worksheet.get_all_values()
        next_col = len(all_data[0]) + 1 if all_data and all_data[0] else 1

        user_info = [
            user_data['user_id'],
            f"@{user_data.get('username', '')}",
            user_data.get('gender', ''),
            user_data.get('age', ''),
            datetime.now().isoformat()
        ]

        for i in range(1, MAX_TRACK + 1):
            user_info.append(ratings.get(str(i), ''))

        for row_idx, value in enumerate(user_info, start=1):
            worksheet.update_cell(row_idx, next_col, value)

        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫–æ–ª–æ–Ω–∫—É {next_col} Google Sheets")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Google –¢–∞–±–ª–∏—Ü—É: {e}")
        return False

def save_to_csv_backup(user_data, ratings):
    """–†–µ–∑–µ—Ä–≤–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ CSV"""
    try:
        file_exists = os.path.exists('backup_results.csv')
        with open('backup_results.csv', 'a', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)

            if not file_exists:
                headers = ['user_id', 'username', 'gender', 'age', 'timestamp']
                for i in range(1, MAX_TRACK + 1):
                    headers.append(f'track_{i}')
                writer.writerow(headers)

            row_data = [
                user_data['user_id'],
                user_data.get('username', ''),
                user_data.get('gender', ''),
                user_data.get('age', ''),
                datetime.now().isoformat()
            ]

            for i in range(1, MAX_TRACK + 1):
                row_data.append(ratings.get(str(i), ''))

            writer.writerow(row_data)

        print("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ CSV –±—ç–∫–∞–ø")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ CSV: {e}")
        return False

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞ ===
@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    user_states[chat_id] = {
        'user_id': chat_id,
        'username': message.from_user.username,
        'ratings': {},
        'current_track': 1,
        'skipped': []  # –Ω–æ–º–µ—Ä–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ñ–∞–π–ª–æ–≤
    }

    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üéµ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", callback_data="start_test"))
    bot.send_message(chat_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", reply_markup=kb)

@bot.callback_query_handler(func=lambda call: call.data == "start_test")
def start_test(call):
    chat_id = call.message.chat.id
    try:
        bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=None)
    except Exception:
        pass
    ask_gender(chat_id)

def ask_gender(chat_id):
    kb = types.InlineKeyboardMarkup()
    kb.row(types.InlineKeyboardButton("–ú—É–∂—Å–∫–æ–π", callback_data="gender_M"))
    kb.row(types.InlineKeyboardButton("–ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_F"))
    bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data.startswith("gender_"))
def handle_gender(c):
    chat_id = c.message.chat.id
    if chat_id not in user_states:
        bot.send_message(chat_id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start")
        return

    user_states[chat_id]['gender'] = c.data.split('_', 1)[1]

    try:
        bot.delete_message(chat_id, c.message.message_id)
    except Exception:
        pass

    ask_age(chat_id)

def ask_age(chat_id):
    kb = types.InlineKeyboardMarkup(row_width=2)
    ages = ["–¥–æ 24", "25-34", "35-44", "45-54", "55+"]
    for age in ages:
        kb.add(types.InlineKeyboardButton(age, callback_data=f"age_{age}"))
    bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data.startswith("age_"))
def handle_age(c):
    chat_id = c.message.chat.id
    if chat_id not in user_states:
        bot.send_message(chat_id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start")
        return

    user_states[chat_id]['age'] = c.data.split('_', 1)[1]

    try:
        bot.delete_message(chat_id, c.message.message_id)
    except Exception:
        pass

    bot.send_message(chat_id, "üéµ –ù–∞—á–∏–Ω–∞–µ–º –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç!\n\n–û—Ü–µ–Ω–∏—Ç–µ –∫–∞–∂–¥—ã–π —Ç—Ä–µ–∫ –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥")
    send_track(chat_id)

def send_track(chat_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—á–µ—Ä–µ–¥–Ω–æ–π —Ç—Ä–µ–∫. –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã, –ø—ã—Ç–∞—è—Å—å –Ω–∞–π—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–π."""
    if chat_id not in user_states:
        return

    # –ó–∞—â–∏—Ç–∞ ‚Äî –µ—Å–ª–∏ —Ç—Ä–µ–∫–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    if MAX_TRACK == 0:
        bot.send_message(chat_id, "‚ö†Ô∏è –¢—Ä–µ–∫–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id}: MAX_TRACK=0")
        return

    # –Ω–∞—á–∏–Ω–∞–µ–º —Å —Ç–µ–∫—É—â–µ–≥–æ –Ω–æ–º–µ—Ä–∞ –∏ –∏—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ñ–∞–π–ª
    start = user_states[chat_id]['current_track']
    track_to_send = None
    skipped = []
    for num in range(start, MAX_TRACK + 1):
        found = find_audio_file(num)
        if found:
            track_to_send = (num, found)
            break
        else:
            skipped.append(num)

    if track_to_send is None:
        # –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ –∫–æ–Ω—Ü–∞ ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        user_data = user_states[chat_id]
        google_success = save_to_google_sheets(user_data, user_data['ratings'])
        csv_success = save_to_csv_backup(user_data, user_data['ratings'])
        if google_success:
            bot.send_message(chat_id, "üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Google –¢–∞–±–ª–∏—Ü—É.")
        elif csv_success:
            bot.send_message(chat_id, "‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª (–ª–æ–∫–∞–ª—å–Ω—ã–π –±—ç–∫–∞–ø).")
        else:
            bot.send_message(chat_id, "‚ö†Ô∏è –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.")
        try:
            del user_states[chat_id]
        except Exception:
            pass
        return

    # –ï—Å–ª–∏ –±—ã–ª–∏ –ø—Ä–æ–ø—É—Å–∫–∏ ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏–º –∏—Ö –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —É–≤–µ–¥–æ–º–∏–º –∫—Ä–∞—Ç–∫–æ
    if skipped:
        user_states[chat_id].setdefault('skipped', [])
        user_states[chat_id]['skipped'].extend(skipped)
        # –∫–æ—Ä–æ—Ç–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø—Ä–æ–ø—É—Å–∫–µ –ø–µ—Ä–≤–æ–≥–æ —Ç—Ä–µ–∫–∞(–æ–≤)
        bot.send_message(chat_id, f"‚ö†Ô∏è –¢—Ä–µ–∫(–∏) {', '.join(str(x) for x in skipped)} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω(—ã) –∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã.")

    track_num, file_path = track_to_send
    # –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫ –Ω–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã–π
    user_states[chat_id]['current_track'] = track_num

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
    try:
        with open(file_path, 'rb') as audio_file:
            bot.send_audio(chat_id, audio_file, caption=f"–¢—Ä–µ–∫ #{track_num}")
    except Exception as e:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–∞: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {file_path} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ü–µ–Ω–∫–æ–π
    kb = types.InlineKeyboardMarkup(row_width=5)
    for i in range(1, 6):
        kb.add(types.InlineKeyboardButton(f"{i}‚òÖ", callback_data=f"rate_{i}"))
    bot.send_message(chat_id, "–û—Ü–µ–Ω–∏—Ç–µ —Ç—Ä–µ–∫:", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data.startswith("rate_"))
def handle_rating(c):
    chat_id = c.message.chat.id
    if chat_id not in user_states:
        bot.send_message(chat_id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start")
        return

    try:
        rating = int(c.data.split('_', 1)[1])
    except Exception:
        rating = None

    track_num = user_states[chat_id]['current_track']
    if rating is not None:
        user_states[chat_id]['ratings'][str(track_num)] = rating

    # –¥–≤–∏–≥–∞–µ–º—Å—è –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –Ω–æ–º–µ—Ä—É (–Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º –≤—ã–∑–æ–≤–µ send_track –±—É–¥–µ—Ç –Ω–∞–π–¥—ë–Ω —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ñ–∞–π–ª)
    user_states[chat_id]['current_track'] = track_num + 1

    try:
        bot.delete_message(chat_id, c.message.message_id)
    except Exception:
        pass

    send_track(chat_id)

@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    bot.send_message(message.chat.id, "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /start")

# === –í–µ–±—Ö—É–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
@app.route('/webhook/' + TOKEN, methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return ''
    return 'Bad Request', 400

@app.route('/')
def index():
    return 'Music Test Bot is running!'

@app.route('/health')
def health():
    return 'OK'

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
    gs_ok = initialize_google_sheets()
    csv_ok = load_track_data()
    print(f"[INIT] GoogleSheets ok={gs_ok}, Tracks loaded ok={csv_ok}, MAX_TRACK={MAX_TRACK}")

    if 'RENDER' in os.environ:
        print("üåê –ó–∞–ø—É—Å–∫ –Ω–∞ Render (–≤–µ–±—Ö—É–∫)")
        port = int(os.environ.get('PORT', 10000))
        app.run(host='0.0.0.0', port=port)
    else:
        print("üíª –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ (polling)")
        bot.remove_webhook()
        bot.polling(none_stop=True)
