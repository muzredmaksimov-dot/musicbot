import os
import telebot
from telebot import types
from flask import Flask, request
import openpyxl
from datetime import datetime

# === –¢–û–ö–ï–ù –ë–û–¢–ê ===
TOKEN = "8109304672:AAHkOQ8kzQLmHupii78YCd-1Q4HtDKWuuNk"
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# === –•–†–ê–ù–ò–õ–ò–©–ï –î–ê–ù–ù–´–• ===
user_metadata = {}        # chat_id -> {gender, age}
user_progress = {}        # chat_id -> —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å —Ç—Ä–µ–∫–∞ (0-29)
user_rated_tracks = {}    # chat_id -> set(–æ—Ü–µ–Ω—ë–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤)

RESULTS_FILE = "results.xlsx"

# === –°–ü–ò–°–û–ö –¢–†–ï–ö–û–í ===
track_files = [f"{str(i).zfill(3)}.mp3" for i in range(1, 31)]  # 001.mp3, 002.mp3... 030.mp3

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø EXCEL ===
def init_excel():
    if not os.path.exists(RESULTS_FILE):
        wb = openpyxl.Workbook()
        ws = wb.active
        ws.append(["chat_id", "gender", "age", "track", "rating", "timestamp"])
        wb.save(RESULTS_FILE)

def save_result(chat_id, track_filename, rating):
    try:
        wb = openpyxl.load_workbook(RESULTS_FILE)
        ws = wb.active
        gender = user_metadata.get(chat_id, {}).get("gender", "unknown")
        age = user_metadata.get(chat_id, {}).get("age", "unknown")
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        ws.append([chat_id, gender, age, track_filename, rating, timestamp])
        wb.save(RESULTS_FILE)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Excel: {e}")

# === –ü–†–û–í–ï–†–ö–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò ===
def is_user_registered(chat_id):
    return chat_id in user_metadata

# === –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î–´ /START ===
@bot.message_handler(commands=['start'])
def handle_start(message):
    chat_id = message.chat.id
    
    if is_user_registered(chat_id):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç
        current_track = user_progress.get(chat_id, 0)
        if current_track < len(track_files):
            bot.send_message(chat_id, "–ü—Ä–æ–¥–æ–ª–∂–∏–º —Ç–µ—Å—Ç! üéµ")
            send_track(chat_id, current_track)
        else:
            bot.send_message(chat_id, "üéâ –í—ã —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ç–µ—Å—Ç! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ.")
        return

    # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    remove_kb = types.ReplyKeyboardRemove()
    bot.send_message(chat_id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç!", reply_markup=remove_kb)

    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å", callback_data="start_test"))
    bot.send_message(
        chat_id,
        "–í—ã —É—Å–ª—ã—à–∏—Ç–µ 30 –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ç—Ä–µ–∫–æ–≤. –û—Ü–µ–Ω–∏—Ç–µ –∫–∞–∂–¥—ã–π –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5:\n\n"
        "1 - –°–æ–≤—Å–µ–º –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è\n"
        "2 - –ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è\n" 
        "3 - –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ\n"
        "4 - –ù—Ä–∞–≤–∏—Ç—Å—è\n"
        "5 - –û—á–µ–Ω—å –Ω—Ä–∞–≤–∏—Ç—Å—è\n\n"
        "–ù–æ —Å–Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è üôÇ",
        reply_markup=kb
    )

# === –ö–ù–û–ü–ö–ê –ù–ê–ß–ê–¢–¨ ===
@bot.callback_query_handler(func=lambda call: call.data == 'start_test')
def handle_start_button(call):
    chat_id = call.message.chat.id
    try:
        bot.delete_message(chat_id, call.message.message_id)
    except:
        pass
    
    user_metadata[chat_id] = {}
    user_progress[chat_id] = 0
    user_rated_tracks[chat_id] = set()
    ask_gender(chat_id)

# === –í–´–ë–û–† –ü–û–õ–ê ===
def ask_gender(chat_id):
    kb = types.InlineKeyboardMarkup()
    kb.add(
        types.InlineKeyboardButton("–ú—É–∂—Å–∫–æ–π", callback_data="gender_–ú—É–∂—Å–∫–æ–π"),
        types.InlineKeyboardButton("–ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_–ñ–µ–Ω—Å–∫–∏–π")
    )
    bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data.startswith("gender_"))
def handle_gender(c):
    chat_id = c.message.chat.id
    user_metadata[chat_id]['gender'] = c.data.split('_', 1)[1]
    try:
        bot.delete_message(chat_id, c.message.message_id)
    except:
        pass
    ask_age(chat_id)

# === –í–´–ë–û–† –í–û–ó–†–ê–°–¢–ê ===
def ask_age(chat_id):
    opts = ["–¥–æ 24", "25-34", "35-44", "45-54", "55+"]
    kb = types.InlineKeyboardMarkup(row_width=2)
    buttons = [types.InlineKeyboardButton(o, callback_data=f"age_{o}") for o in opts]
    kb.add(*buttons)
    bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data.startswith("age_"))
def handle_age(c):
    chat_id = c.message.chat.id
    user_metadata[chat_id]['age'] = c.data.split('_', 1)[1]
    try:
        bot.delete_message(chat_id, c.message.message_id)
    except:
        pass
    bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ! üé∂ –°–µ–π—á–∞—Å –Ω–∞—á–Ω–µ–º —Ç–µ—Å—Ç.")
    send_track(chat_id, user_progress[chat_id])

# === –û–¢–ü–†–ê–í–ö–ê –¢–†–ï–ö–ê ===
def send_track(chat_id, track_index):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
    if track_index >= len(track_files):
        bot.send_message(chat_id, "üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ.")
        return
    
    track_filename = track_files[track_index]
    track_path = os.path.join("tracks", track_filename)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ü–µ–Ω–∫–∞–º–∏
    kb = types.InlineKeyboardMarkup(row_width=5)
    buttons = [types.InlineKeyboardButton(str(i), callback_data=f"rate_{track_index}_{i}") for i in range(1, 6)]
    kb.add(*buttons)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫
    if os.path.exists(track_path):
        try:
            with open(track_path, 'rb') as audio_file:
                bot.send_message(chat_id, f"üéµ –¢—Ä–µ–∫ {track_index + 1} –∏–∑ {len(track_files)}")
                bot.send_audio(chat_id, audio_file, title=f"–¢—Ä–µ–∫ {track_index + 1}", reply_markup=kb)
        except Exception as e:
            bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–µ–∫–∞: {e}")
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π —Ç—Ä–µ–∫
            user_progress[chat_id] += 1
            send_track(chat_id, user_progress[chat_id])
    else:
        bot.send_message(chat_id, f"‚ö†Ô∏è –¢—Ä–µ–∫ {track_filename} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π —Ç—Ä–µ–∫
        user_progress[chat_id] += 1
        send_track(chat_id, user_progress[chat_id])

# === –û–ë–†–ê–ë–û–¢–ö–ê –û–¶–ï–ù–ö–ò ===
@bot.callback_query_handler(func=lambda c: c.data.startswith("rate_"))
def handle_rating(c):
    chat_id = c.message.chat.id
    data_parts = c.data.split('_')
    
    if len(data_parts) != 3:
        return
    
    track_index = int(data_parts[1])
    rating = int(data_parts[2])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞
    save_result(chat_id, track_files[track_index], rating)
    user_rated_tracks[chat_id].add(track_index)
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    user_progress[chat_id] += 1
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    try:
        bot.delete_message(chat_id, c.message.message_id)
    except:
        pass
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫
    send_track(chat_id, user_progress[chat_id])

# === FLASK WEBHOOK ===
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_str = request.get_data().decode('UTF-8')
        update = telebot.types.Update.de_json(json_str)
        bot.process_new_updates([update])
        return "ok", 200
    return "Bad Request", 400

@app.route("/", methods=["GET"])
def index():
    return "–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! üéµ", 200

# === –ó–ê–ü–£–°–ö ===
if name == "__main__":
    init_excel()
    port = int(os.environ.get("PORT", 5000))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
    if not os.environ.get("DEBUG"):
        bot.remove_webhook()
        bot.set_webhook(url=f"https://musicbot-knqj.onrender.com/{TOKEN}")
    
    app.run(host="0.0.0.0", port=port, debug=os.environ.get("DEBUG"))
