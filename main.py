import os
import telebot
from telebot import types
from flask import Flask, request
import openpyxl

# === –¢–í–û–ô –¢–û–ö–ï–ù ===
TOKEN = "8109304672:AAHkOQ8kzQLmHupii78YCd-1Q4HtDKWuuNk"
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# === –•–†–ê–ù–ò–õ–ò–©–ï –î–ê–ù–ù–´–• ===
user_metadata = {}        # chat_id -> {gender, age}
user_progress = {}        # chat_id -> —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫
user_rated_tracks = {}    # chat_id -> set(–æ—Ü–µ–Ω—ë–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤)

RESULTS_FILE = "results.xlsx"

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø EXCEL ===
def init_excel():
    if not os.path.exists(RESULTS_FILE):
        wb = openpyxl.Workbook()
        ws = wb.active
        ws.append(["chat_id", "gender", "age", "track_id", "rating"])
        wb.save(RESULTS_FILE)

def save_result(chat_id, track_id, rating):
    wb = openpyxl.load_workbook(RESULTS_FILE)
    ws = wb.active
    gender = user_metadata.get(chat_id, {}).get("gender", "")
    age = user_metadata.get(chat_id, {}).get("age", "")
    ws.append([chat_id, gender, age, track_id, rating])
    wb.save(RESULTS_FILE)

# === –û–ü–†–û–° –ü–ï–†–ï–î –¢–ï–°–¢–û–ú ===
@bot.message_handler(func=lambda message: message.chat.id not in user_metadata)
def welcome_handler(message):
    chat_id = message.chat.id

    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ –±—ã–ª–∞
    remove_kb = types.ReplyKeyboardRemove()
    bot.send_message(chat_id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç!", reply_markup=remove_kb)

    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å", callback_data="start_test"))
    bot.send_message(
        chat_id,
        "–¢—ã —É—Å–ª—ã—à–∏—à—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ç—Ä–µ–∫–æ–≤. –û—Ü–µ–Ω–∏ –∫–∞–∂–¥—ã–π –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5:\n\n"
        "–ù–æ —Å–Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è üôÇ",
        reply_markup=kb
    )

# === –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–ö–ò "–ù–ê–ß–ê–¢–¨" ===
@bot.callback_query_handler(func=lambda call: call.data == 'start_test')
def handle_start_button(call):
    chat_id = call.message.chat.id
    bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=None)
    user_metadata[chat_id] = {}
    user_progress[chat_id] = 0
    user_rated_tracks[chat_id] = set()
    ask_gender(chat_id)

# === –í–û–ü–†–û–° –ü–†–û –ü–û–õ ===
def ask_gender(chat_id):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add("–ú—É–∂—á–∏–Ω–∞", "–ñ–µ–Ω—â–∏–Ω–∞")
    bot.send_message(chat_id, "–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=kb)

@bot.message_handler(func=lambda msg: msg.chat.id in user_metadata and "gender" not in user_metadata[msg.chat.id])
def handle_gender(message):
    chat_id = message.chat.id
    user_metadata[chat_id]["gender"] = message.text
    ask_age(chat_id)

# === –í–û–ü–†–û–° –ü–†–û –í–û–ó–†–ê–°–¢ ===
def ask_age(chat_id):
    kb = types.ReplyKeyboardRemove()
    bot.send_message(chat_id, "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:", reply_markup=kb)

@bot.message_handler(func=lambda msg: msg.chat.id in user_metadata and "gender" in user_metadata[msg.chat.id] and "age" not in user_metadata[msg.chat.id])
def handle_age(message):
    chat_id = message.chat.id
    if not message.text.isdigit():
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ üôÇ")
        return
    user_metadata[chat_id]["age"] = int(message.text)
    bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ! üé∂ –°–µ–π—á–∞—Å –Ω–∞—á–Ω—ë–º —Ç–µ—Å—Ç.")

    # —Ç—É—Ç –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–∫–∞–∑–∞ —Ç—Ä–µ–∫–æ–≤
    # send_track(chat_id, user_progress[chat_id])

# === –û–ë–†–ê–ë–û–¢–ö–ê –û–¶–ï–ù–ö–ò –¢–†–ï–ö–ê ===
@bot.message_handler(func=lambda msg: msg.text in ["1", "2", "3", "4", "5"])
def handle_rating(message):
    chat_id = message.chat.id
    rating = int(message.text)
    track_id = user_progress.get(chat_id, 0)

    if chat_id in user_metadata:
        save_result(chat_id, track_id, rating)
        user_rated_tracks[chat_id].add(track_id)
        user_progress[chat_id] += 1
        bot.send_message(chat_id, f"‚úÖ –û—Ü–µ–Ω–∫–∞ {rating} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")

        # –º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫
        # send_track(chat_id, user_progress[chat_id])

# === FLASK –î–õ–Ø WEBHOOK ===
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    json_str = request.get_data().decode("UTF-8")
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "ok", 200

@app.route("/", methods=["GET"])
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Render üöÄ", 200

if name == "__main__":
    init_excel()
    port = int(os.environ.get("PORT", 5000))
    bot.remove_webhook()
    bot.set_webhook(url=f"https://–¢–í–û–ô-–†–ï–ù–î–ï–†-URL.onrender.com/{TOKEN}")
    app.run(host="0.0.0.0", port=port)
