import telebot
import csv
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import os
from telebot import types
from datetime import datetime
from flask import Flask, request
import json
import time

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = "8109304672:AAHkOQ8kzQLmHupii78YCd-1Q4HtDKWuuNk"
ADMIN_CHAT_ID = "866964827"
AUDIO_FOLDER = "audio"
SPREADSHEET_NAME = "music_testing"
WORKSHEET_NAME = "track_list"

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# === Google Sheets –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ===
scope = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/drive"
]

worksheet = None

# === –•–†–ê–ù–ò–õ–ò–©–ï –î–õ–Ø –£–î–ê–õ–ï–ù–ò–Ø –°–û–û–ë–©–ï–ù–ò–ô ===
user_last_message = {}
user_rating_guide = {}  # –•—Ä–∞–Ω–∏–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–æ–π –æ—Ü–µ–Ω–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_rating_time = {}
user_states = {}  # –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {chat_id: {user_data, ratings, current_track}}

# === –°–û–û–ë–©–ï–ù–ò–ï –° –†–ê–°–®–ò–§–†–û–í–ö–û–ô –û–¶–ï–ù–û–ö ===
RATING_GUIDE_MESSAGE = """
üéµ **–®–∫–∞–ª–∞ –æ—Ü–µ–Ω–æ–∫:**

1Ô∏è‚É£ ‚òÖ - –°–æ–≤—Å–µ–º –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è
2Ô∏è‚É£ ‚òÖ‚òÖ - –°–∫–æ—Ä–µ–µ –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è  
3Ô∏è‚É£ ‚òÖ‚òÖ‚òÖ - –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ
4Ô∏è‚É£ ‚òÖ‚òÖ‚òÖ‚òÖ - –ù—Ä–∞–≤–∏—Ç—Å—è
5Ô∏è‚É£ ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ - –û—á–µ–Ω—å –Ω—Ä–∞–≤–∏—Ç—Å—è

–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞:
"""

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø GOOGLE SHEETS ===
def initialize_google_sheets():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google –¢–∞–±–ª–∏—Ü–∞–º"""
    global worksheet
    try:
        creds_json_str = os.environ.get('GOOGLE_CREDS_JSON')
        creds_b64 = os.environ.get('GOOGLE_CREDS_B64')

        if creds_json_str:
            creds_dict = json.loads(creds_json_str)
        elif creds_b64:
            import base64
            creds_dict = json.loads(base64.b64decode(creds_b64).decode('utf-8'))
        elif os.path.exists('creds.json'):
            with open('creds.json', 'r', encoding='utf-8') as f:
                creds_dict = json.load(f)
        else:
            print("‚ùå –ù–µ—Ç –∫–ª—é—á–∞ –¥–ª—è Google API")
            return False

        creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
        client = gspread.authorize(creds)
        spreadsheet = client.open(SPREADSHEET_NAME)
        worksheet = spreadsheet.worksheet(WORKSHEET_NAME)
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Google –¢–∞–±–ª–∏—Ü–µ!")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Google Sheets: {e}")
        return False

# === –°–û–•–†–ê–ù–ï–ù–ò–ï –í GOOGLE TABLES ===
def save_to_google_sheets(user_data, ratings):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Google –¢–∞–±–ª–∏—Ü—É"""
    if not worksheet:
        print("‚ùå Google –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞")
        return False
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        all_data = worksheet.get_all_values()
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π —Å–≤–æ–±–æ–¥–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü
        if not all_data:
            next_col = 1
        else:
            next_col = len(all_data[0]) + 1
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
        user_info = [
            user_data['user_id'],
            f"@{user_data['username']}" if user_data.get('username') else user_data.get('first_name', ''),
            user_data.get('last_name', ''),
            user_data['gender'],
            user_data['age'],
            datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç—Ä–µ–∫–∞ (1-30)
        for i in range(1, 31):
            user_info.append(ratings.get(str(i), ''))
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        for row_idx, value in enumerate(user_info, start=1):
            worksheet.update_cell(row_idx, next_col, value)
        
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫–æ–ª–æ–Ω–∫—É {next_col}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Google –¢–∞–±–ª–∏—Ü—É: {e}")
        return False

# === –†–ï–ó–ï–†–í–ù–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï –í CSV ===
def save_to_csv_backup(user_data, ratings):
    """–†–µ–∑–µ—Ä–≤–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ CSV"""
    try:
        file_exists = os.path.exists('backup_results.csv')
        
        with open('backup_results.csv', 'a', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            
            if not file_exists:
                headers = ['user_id', 'username', 'first_name', 'last_name', 'gender', 'age', 'timestamp']
                for i in range(1, 31):
                    headers.append(f'track_{i}')
                writer.writerow(headers)
            
            row_data = [
                user_data['user_id'],
                user_data.get('username', ''),
                user_data.get('first_name', ''),
                user_data.get('last_name', ''),
                user_data['gender'],
                user_data['age'],
                datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            ]
            
            for i in range(1, 31):
                row_data.append(ratings.get(str(i), ''))
            
            writer.writerow(row_data)
        
        print("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ CSV —Ñ–∞–π–ª")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ CSV: {e}")
        return False

# === –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò –ò –°–û–•–†–ê–ù–ï–ù–ò–Ø –°–û–û–ë–©–ï–ù–ò–ô ===
def send_message(chat_id, text, reply_markup=None, parse_mode=None):
    try:
        msg = bot.send_message(chat_id, text, reply_markup=reply_markup, parse_mode=parse_mode)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if chat_id not in user_last_message:
            user_last_message[chat_id] = []
        user_last_message[chat_id].append(msg.message_id)
        return msg
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# === –û–ß–ò–°–¢–ö–ê –ß–ê–¢–ê (–° –°–û–•–†–ê–ù–ï–ù–ò–ï–ú –†–ê–°–®–ò–§–†–û–í–ö–ò) ===
def cleanup_chat(chat_id, keep_rating_guide=False):
    if chat_id in user_last_message:
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–æ–π –æ—Ü–µ–Ω–æ–∫
            rating_guide_id = user_rating_guide.get(chat_id)
            
            messages_to_keep = []
            if keep_rating_guide and rating_guide_id:
                messages_to_keep.append(rating_guide_id)
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫—Ä–æ–º–µ —Ç–µ—Ö, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
            for msg_id in user_last_message[chat_id]:
                if msg_id not in messages_to_keep:
                    try:
                        bot.delete_message(chat_id, msg_id)
                    except:
                        pass
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏
            user_last_message[chat_id] = messages_to_keep
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–∞: {e}")

# === –û–¢–ü–†–ê–í–ö–ê –†–ê–°–®–ò–§–†–û–í–ö–ò –û–¶–ï–ù–û–ö ===
def send_rating_guide(chat_id):
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
    if chat_id in user_rating_guide:
        try:
            bot.delete_message(chat_id, user_rating_guide[chat_id])
        except:
            pass
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É
    msg = send_message(chat_id, RATING_GUIDE_MESSAGE, parse_mode='Markdown')
    if msg:
        user_rating_guide[chat_id] = msg.message_id

# === –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î ===
@bot.message_handler(commands=['start'])
def handle_start(message):
    chat_id = message.chat.id
    user = message.from_user
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∫—Ä–æ–º–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏)
    cleanup_chat(chat_id, keep_rating_guide=True)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states[chat_id] = {
        'user_data': {
            'user_id': chat_id,
            'username': user.username,
            'first_name': user.first_name,
            'last_name': user.last_name,
            'gender': '',
            'age': ''
        },
        'ratings': {},
        'current_track': 1
    }
    
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", callback_data="start_test"))
    
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üéµ\n\n"
        "–í—ã –ø—Ä–æ—Å–ª—É—à–∞–µ—Ç–µ 30 –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ –∏ –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞–∂–¥—ã–π –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5.\n\n"
        "üéÅ –ü–æ—Å–ª–µ —Ç–µ—Å—Ç–∞ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±—É–¥–µ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à –ø–æ–¥–∞—Ä–∫–æ–≤!"
    )
    
    send_message(chat_id, welcome_text, reply_markup=kb)

@bot.callback_query_handler(func=lambda call: call.data == 'start_test')
def handle_start_button(call):
    chat_id = call.message.chat.id
    try:
        bot.delete_message(chat_id, call.message.message_id)
    except:
        pass
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    cleanup_chat(chat_id)
    
    ask_gender(chat_id)

# === –í–´–ë–û–† –ü–û–õ–ê –ò –í–û–ó–†–ê–°–¢–ê ===
def ask_gender(chat_id):
    kb = types.InlineKeyboardMarkup()
    kb.add(
        types.InlineKeyboardButton("–ú—É–∂—Å–∫–æ–π", callback_data="gender_–ú—É–∂—Å–∫–æ–π"),
        types.InlineKeyboardButton("–ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_–ñ–µ–Ω—Å–∫–∏–π")
    )
    send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data.startswith("gender_"))
def handle_gender(c):
    chat_id = c.message.chat.id
    gender = c.data.split('_', 1)[1]
    
    user_states[chat_id]['user_data']['gender'] = gender
    
    try:
        bot.delete_message(chat_id, c.message.message_id)
    except:
        pass
    
    # –û—á–∏—â–∞–µ–º —á–∞—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º
    cleanup_chat(chat_id)
    ask_age(chat_id)

def ask_age(chat_id):
    opts = ["–¥–æ 24", "25-34", "35-44", "45-54", "55+"]
    kb = types.InlineKeyboardMarkup(row_width=2)
    buttons = [types.InlineKeyboardButton(o, callback_data=f"age_{o}") for o in opts]
    kb.add(*buttons)
    send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data.startswith("age_"))
def handle_age(c):
    chat_id = c.message.chat.id
    age = c.data.split('_', 1)[1]
    
    user_states[chat_id]['user_data']['age'] = age
    
    try:
        bot.delete_message(chat_id, c.message.message_id)
    except:
        pass
    
    # –û—á–∏—â–∞–µ–º —á–∞—Ç –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ç–µ—Å—Ç–∞
    cleanup_chat(chat_id)
    
    username_display = f"@{user_states[chat_id]['user_data']['username']}" if user_states[chat_id]['user_data']['username'] else user_states[chat_id]['user_data']['first_name']
    
    send_message(
        chat_id, 
        f"–°–ø–∞—Å–∏–±–æ, {username_display}! üé∂\n\n"
        "–¢–µ–ø–µ—Ä—å –Ω–∞—á–Ω–µ–º —Å–ª–µ–ø–æ–π —Ç–µ—Å—Ç. –£–¥–∞—á–∏ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ! üéÅ"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É –æ—Ü–µ–Ω–æ–∫
    send_rating_guide(chat_id)
    
    send_track(chat_id)

# === –û–¢–ü–†–ê–í–ö–ê –¢–†–ï–ö–ê ===
def send_track(chat_id):
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É –æ—Ü–µ–Ω–æ–∫
    cleanup_chat(chat_id, keep_rating_guide=True)
    
    track_num = user_states[chat_id]['current_track']
    
    if track_num > 30:
        finish_test(chat_id)
        return
    
    track_filename = f"{track_num:03d}.mp3"
    track_path = os.path.join(AUDIO_FOLDER, track_filename)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞
    progress_text = send_message(chat_id, f"üéµ –¢—Ä–µ–∫ {track_num}/30")
    
    if os.path.exists(track_path):
        try:
            with open(track_path, 'rb') as audio_file:
                audio_msg = bot.send_audio(chat_id, audio_file, title=f"–¢—Ä–µ–∫ {track_num:03d}")
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
                if chat_id not in user_last_message:
                    user_last_message[chat_id] = []
                user_last_message[chat_id].append(audio_msg.message_id)
                
                # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
                kb = types.InlineKeyboardMarkup(row_width=5)
                buttons = [types.InlineKeyboardButton(str(i), callback_data=f"rate_{i}") for i in range(1, 6)]
                kb.add(*buttons)
                
                rating_msg = bot.send_message(chat_id, "–û—Ü–µ–Ω–∏—Ç–µ —Ç—Ä–µ–∫:", reply_markup=kb)
                user_last_message[chat_id].append(rating_msg.message_id)
                
        except Exception as e:
            send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–µ–∫–∞: {e}")
            user_states[chat_id]['current_track'] += 1
            send_track(chat_id)
    else:
        send_message(chat_id, f"‚ö†Ô∏è –¢—Ä–µ–∫ {track_num:03d} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        user_states[chat_id]['current_track'] += 1
        send_track(chat_id)

# === –û–ë–†–ê–ë–û–¢–ö–ê –û–¶–ï–ù–ö–ò ===
@bot.callback_query_handler(func=lambda c: c.data.startswith("rate_"))
def handle_rating(c):
    chat_id = c.message.chat.id
    rating = int(c.data.split('_')[1])
    track_num = user_states[chat_id]['current_track']
    
    current_time = time.time()
    last_rating_time = user_rating_time.get(chat_id, 0)
    
    if current_time - last_rating_time < 2:
        bot.answer_callback_query(c.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ—Å–ª—É—à–∞–π—Ç–µ —Ç—Ä–µ–∫ –ø–µ—Ä–µ–¥ –æ—Ü–µ–Ω–∫–æ–π")
        return
    
    user_rating_time[chat_id] = current_time
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É
    user_states[chat_id]['ratings'][str(track_num)] = rating
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    try:
        bot.delete_message(chat_id, c.message.message_id)
    except:
        pass
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç—Ä–µ–∫—É
    user_states[chat_id]['current_track'] += 1
    
    # –û—á–∏—â–∞–µ–º —á–∞—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ç—Ä–µ–∫–æ–º, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É –æ—Ü–µ–Ω–æ–∫
    cleanup_chat(chat_id, keep_rating_guide=True)
    
    send_track(chat_id)

def finish_test(chat_id):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    user_data = user_states[chat_id]['user_data']
    ratings = user_states[chat_id]['ratings']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    google_success = save_to_google_sheets(user_data, ratings)
    csv_success = save_to_csv_backup(user_data, ratings)
    
    username_display = f"@{user_data['username']}" if user_data['username'] else user_data['first_name']
    
    if google_success:
        send_message(
            chat_id, 
            f"üéâ {username_display}, —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Google –¢–∞–±–ª–∏—Ü—É.\n\n"
            "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –ø–æ–¥–∞—Ä–∫–æ–≤! üéÅ"
        )
    elif csv_success:
        send_message(
            chat_id, 
            f"üéâ {username_display}, —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.\n\n"
            "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –ø–æ–¥–∞—Ä–∫–æ–≤! üéÅ"
        )
    else:
        send_message(chat_id, "‚ö†Ô∏è –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.")

# === FLASK WEBHOOK ===
@app.route(f'/webhook/{TOKEN}', methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return ''
    return 'Bad Request', 400

@app.route('/')
def index():
    return 'Music Test Bot is running!'

@app.route('/health')
def health():
    return 'OK'

# === –ó–ê–ü–£–°–ö ===
if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets
    initialize_google_sheets()
    
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    # –ó–∞–ø—É—Å–∫
    if 'RENDER' in os.environ:
        print("üåê –ó–∞–ø—É—Å–∫ –Ω–∞ Render (–≤–µ–±—Ö—É–∫)")
        port = int(os.environ.get('PORT', 10000))
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
        try:
            bot.remove_webhook()
            time.sleep(1)
            webhook_url = f"https://musicbot-knqj.onrender.com/webhook/{TOKEN}"
            bot.set_webhook(url=webhook_url)
            print(f"‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        
        app.run(host='0.0.0.0', port=port)
    else:
        print("üíª –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ (polling)")
        bot.remove_webhook()
        bot.polling(none_stop=True)
