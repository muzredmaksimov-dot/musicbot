import os
import telebot
import time
import csv
from telebot import types
from flask import Flask, request
from datetime import datetime
import json
import requests
import base64

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = "–í–ê–®_–¢–û–ö–ï–ù"
ADMIN_CHAT_ID = "866964827"
AUDIO_FOLDER = "tracks"
CSV_FILE = "backup_results.csv"
SUBSCRIBERS_FILE = "subscribers.txt"

# GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è CSV –∏ subscribers.txt
GITHUB_REPO = "muzredmaksimov-dot/testmuzicbot_results"
GITHUB_TOKEN = os.environ.get("GITHUB_TOKEN")  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–¥–∞—Ç—å –≤ Render Secrets

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# === –•–†–ê–ù–ò–õ–ò–©–ï ===
user_last_message = {}
user_rating_guide = {}
user_rating_time = {}
user_states = {}

# === –ü–û–î–°–ö–ê–ó–ö–ê –ü–û –û–¶–ï–ù–ö–ê–ú ===
RATING_GUIDE_MESSAGE = """
1Ô∏è‚É£  - –ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è  
2Ô∏è‚É£  - –†–∞–Ω—å—à–µ –Ω—Ä–∞–≤–∏–ª–∞—Å—å, –Ω–æ –Ω–∞–¥–æ–µ–ª–∞  
3Ô∏è‚É£  - –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ  
4Ô∏è‚É£  - –ù—Ä–∞–≤–∏—Ç—Å—è  
5Ô∏è‚É£  - –õ—é–±–∏–º–∞—è –ø–µ—Å–Ω—è
"""

# === –£–¢–ò–õ–ò–¢–´ ===
def github_read_file(repo, path_in_repo, token):
    """–ß—Ç–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ —Å GitHub"""
    try:
        url = f"https://api.github.com/repos/{repo}/contents/{path_in_repo}"
        headers = {"Accept": "application/vnd.github+json"}
        if token:
            headers["Authorization"] = f"token {token}"
        r = requests.get(url, headers=headers)
        if r.status_code == 200:
            content_b64 = r.json().get("content", "")
            return base64.b64decode(content_b64).decode("utf-8")
        return ""
    except Exception as e:
        print("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å GitHub:", e)
        return ""

def github_write_file(repo, path_in_repo, token, content_text, commit_message):
    """–ó–∞–ø–∏—Å—å (–ø–µ—Ä–µ–∑–∞–ø–∏—Å—å) —Ñ–∞–π–ª–∞ –≤ GitHub"""
    try:
        url = f"https://api.github.com/repos/{repo}/contents/{path_in_repo}"
        headers = {"Accept": "application/vnd.github+json"}
        if token:
            headers["Authorization"] = f"token {token}"
        r_get = requests.get(url, headers=headers)
        b64 = base64.b64encode(content_text.encode("utf-8")).decode("utf-8")
        payload = {"message": commit_message, "content": b64}
        if r_get.status_code == 200:
            payload["sha"] = r_get.json().get("sha")
        r_put = requests.put(url, headers=headers, json=payload)
        return r_put.status_code in (200, 201)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ GitHub:", e)
        return False

def github_append_line(repo, path_in_repo, token, line, header_if_missing=None):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–∞ GitHub"""
    existing = github_read_file(repo, path_in_repo, token)
    if not existing:
        if header_if_missing:
            new_text = header_if_missing + "\n" + line + "\n"
        else:
            new_text = line + "\n"
    else:
        if not existing.endswith("\n"):
            existing += "\n"
        new_text = existing + line + "\n"
    return github_write_file(repo, path_in_repo, token, new_text, f"Update {path_in_repo}")

# === –û–¢–ü–†–ê–í–ö–ê ===
def send_message(chat_id, text, reply_markup=None, parse_mode=None):
    try:
        msg = bot.send_message(chat_id, text, reply_markup=reply_markup, parse_mode=parse_mode)
        user_last_message.setdefault(chat_id, []).append(msg.message_id)
        return msg
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", e)

def cleanup_chat(chat_id, keep_rating_guide=False):
    try:
        messages_to_keep = [user_rating_guide.get(chat_id)] if keep_rating_guide else []
        for msg_id in user_last_message.get(chat_id, []):
            if msg_id not in messages_to_keep and msg_id:
                try:
                    bot.delete_message(chat_id, msg_id)
                except:
                    pass
        user_last_message[chat_id] = messages_to_keep
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–∞:", e)

def send_rating_guide(chat_id):
    if chat_id in user_rating_guide:
        try: bot.delete_message(chat_id, user_rating_guide[chat_id])
        except: pass
    msg = send_message(chat_id, RATING_GUIDE_MESSAGE)
    user_rating_guide[chat_id] = msg.message_id

# === –°–¢–ê–†–¢ ===
@bot.message_handler(commands=["start"])
def start(message):
    chat_id = message.chat.id
    user = message.from_user

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (–∏ –Ω–∞ GitHub)
    try:
        subscribers_text = github_read_file(GITHUB_REPO, SUBSCRIBERS_FILE, GITHUB_TOKEN)
        subscribers = set(s.strip() for s in subscribers_text.split("\n") if s.strip())
        if str(chat_id) not in subscribers:
            subscribers.add(str(chat_id))
            new_text = "\n".join(sorted(subscribers))
            github_write_file(GITHUB_REPO, SUBSCRIBERS_FILE, GITHUB_TOKEN, new_text, "Add new subscriber")
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ subscribers:", e)

    cleanup_chat(chat_id)
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", callback_data="start_test"))
    send_message(chat_id, f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üéµ\n\n"
                          "–í—ã –ø—Ä–æ—Å–ª—É—à–∞–µ—Ç–µ 30 –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –∏ –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞–∂–¥—ã–π –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5.\n\n"
                          "üéÅ –ü–æ—Å–ª–µ —Ç–µ—Å—Ç–∞ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ‚Äî —Ä–æ–∑—ã–≥—Ä—ã—à –ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã—Ö –Ω–∞—É—à–Ω–∏–∫–æ–≤!\n\n"
                          "_–ù–∞–∂–∏–º–∞—è ¬´–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç¬ª, –≤—ã –¥–∞—ë—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö._",
                 reply_markup=kb, parse_mode="Markdown")

@bot.callback_query_handler(func=lambda call: call.data == "start_test")
def start_test(call):
    chat_id = call.message.chat.id
    user = call.from_user
    user_states[chat_id] = {
        "user_data": {
            "user_id": chat_id,
            "username": user.username,
            "first_name": user.first_name,
            "last_name": user.last_name,
            "gender": "",
            "age": ""
        },
        "ratings": {},
        "current_track": 1
    }
    try: bot.delete_message(chat_id, call.message.message_id)
    except: pass
    ask_gender(chat_id)

# === –ê–ù–ö–ï–¢–ê ===
def ask_gender(chat_id):
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–ú—É–∂—Å–∫–æ–π", callback_data="gender_M"),
           types.InlineKeyboardButton("–ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_F"))
    send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data.startswith("gender_"))
def handle_gender(c):
    chat_id = c.message.chat.id
    gender = "–ú—É–∂—Å–∫–æ–π" if c.data.endswith("M") else "–ñ–µ–Ω—Å–∫–∏–π"
    user_states[chat_id]["user_data"]["gender"] = gender
    try: bot.delete_message(chat_id, c.message.message_id)
    except: pass
    ask_age(chat_id)

def ask_age(chat_id):
    kb = types.InlineKeyboardMarkup(row_width=2)
    for o in ["–¥–æ 24", "25-34", "35-44", "45-54", "55+"]:
        kb.add(types.InlineKeyboardButton(o, callback_data=f"age_{o}"))
    send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data.startswith("age_"))
def handle_age(c):
    chat_id = c.message.chat.id
    user_states[chat_id]["user_data"]["age"] = c.data.split("_", 1)[1]
    try: bot.delete_message(chat_id, c.message.message_id)
    except: pass
    username = user_states[chat_id]["user_data"].get("username") or user_states[chat_id]["user_data"]["first_name"]
    send_message(chat_id, f"–°–ø–∞—Å–∏–±–æ, @{username}! üé∂\n\n–¢–µ–ø–µ—Ä—å –Ω–∞—á–Ω–µ–º —Ç–µ—Å—Ç. –£–¥–∞—á–∏! üéÅ")
    time.sleep(1)
    send_rating_guide(chat_id)
    send_track(chat_id)

# === –û–¢–ü–†–ê–í–ö–ê –¢–†–ï–ö–û–í ===
def send_track(chat_id):
    cleanup_chat(chat_id, keep_rating_guide=True)
    track_num = user_states[chat_id]["current_track"]
    if track_num > 30:
        finish_test(chat_id)
        return
    track_filename = f"{track_num:03d}.mp3"
    path = os.path.join(AUDIO_FOLDER, track_filename)
    send_message(chat_id, f"üéµ –¢—Ä–µ–∫ {track_num}/30")
    if os.path.exists(path):
        with open(path, "rb") as a:
            bot.send_audio(chat_id, a, title=f"–¢—Ä–µ–∫ {track_num:03d}")
        kb = types.InlineKeyboardMarkup(row_width=5)
        kb.add(*[types.InlineKeyboardButton(str(i), callback_data=f"rate_{i}") for i in range(1, 6)])
        send_message(chat_id, "–û—Ü–µ–Ω–∏—Ç–µ —Ç—Ä–µ–∫:", reply_markup=kb)
    else:
        user_states[chat_id]["current_track"] += 1
        send_track(chat_id)

@bot.callback_query_handler(func=lambda c: c.data.startswith("rate_"))
def rate(c):
    chat_id = c.message.chat.id
    r = int(c.data.split("_")[1])
    t = user_states[chat_id]["current_track"]
    user_states[chat_id]["ratings"][str(t)] = r
    user_states[chat_id]["current_track"] += 1
    try: bot.delete_message(chat_id, c.message.message_id)
    except: pass
    send_track(chat_id)

# === –§–ò–ù–ê–õ ===
def finish_test(chat_id):
    user = user_states[chat_id]["user_data"]
    ratings = user_states[chat_id]["ratings"]

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º CSV –ª–æ–∫–∞–ª—å–Ω–æ
    file_exists = os.path.exists(CSV_FILE)
    with open(CSV_FILE, "a", newline="", encoding="utf-8") as f:
        w = csv.writer(f)
        if not file_exists:
            headers = ["user_id", "username", "first_name", "last_name", "gender", "age"] + [f"track_{i}" for i in range(1, 31)]
            w.writerow(headers)
        row = [user["user_id"], user.get("username", ""), user.get("first_name", ""), user.get("last_name", ""), user["gender"], user["age"]] + [ratings.get(str(i), "") for i in range(1, 31)]
        w.writerow(row)

    # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞ GitHub
    with open(CSV_FILE, "r", encoding="utf-8") as f:
        lines = f.readlines()
    if len(lines) >= 2:
        github_append_line(GITHUB_REPO, CSV_FILE, GITHUB_TOKEN, lines[-1].strip(), header_if_missing=lines[0].strip())

    send_message(chat_id, f"üéâ @{user.get('username') or user['first_name']}, —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!\n\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ @RadioMlR_Efir üéÅ")

# === –°–ë–†–û–° ===
@bot.message_handler(commands=["reset_all"])
def reset_all(message):
    if str(message.chat.id) != ADMIN_CHAT_ID:
        bot.send_message(message.chat.id, "‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    args = message.text.split()
    announce = len(args) > 1 and args[1].lower() in ("announce", "1", "send")

    # –æ—á–∏—Å—Ç–∫–∞ CSV
    headers = ["user_id","username","first_name","last_name","gender","age"]+[f"track_{i}" for i in range(1,31)]
    open(CSV_FILE, "w", encoding="utf-8").write(",".join(headers) + "\n")
    github_write_file(GITHUB_REPO, CSV_FILE, GITHUB_TOKEN, ",".join(headers) + "\n", "Reset CSV")

    # —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–æ–≤—ã–º —Ç–µ—Å—Ç–æ–º
    if announce:
        subs_text = github_read_file(GITHUB_REPO, SUBSCRIBERS_FILE, GITHUB_TOKEN)
        subs = [s.strip() for s in subs_text.split("\n") if s.strip()]
        sent_count = 0
        for s in subs:
            try:
                kb = types.InlineKeyboardMarkup()
                kb.add(types.InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", callback_data="start_test"))
                bot.send_message(int(s), "üéß –ù–æ–≤—ã–π –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —É–∂–µ –≥–æ—Ç–æ–≤!\n\n"
                                         "–ü—Ä–æ–π–¥–∏ –∏ –æ—Ü–µ–Ω–∏ 30 —Ç—Ä–µ–∫–æ–≤ ‚Äî —Ç–≤–æ–µ –º–Ω–µ–Ω–∏–µ –≤–∞–∂–Ω–æ –¥–ª—è —Ä–∞–¥–∏–æ –ú–ò–†! üé∂",
                                 reply_markup=kb)
                sent_count += 1
                time.sleep(0.1)
            except Exception:
                pass
        bot.send_message(ADMIN_CHAT_ID, f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ({sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π).")
    else:
        bot.send_message(ADMIN_CHAT_ID, "‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã (–±–µ–∑ —Ä–∞—Å—Å—ã–ª–∫–∏).")

# === –ó–ê–ü–£–°–ö ===
@app.route(f'/webhook/{TOKEN}', methods=['POST'])
def webhook():
    if request.headers.get('content-type')=='application/json':
        update = telebot.types.Update.de_json(request.get_data().decode('utf-8'))
        bot.process_new_updates([update])
        return ''
    return 'Bad Request',400

@app.route('/')
def index(): return 'Music Test Bot running!'
@app.route('/health')
def health(): return 'OK'

if __name__=="__main__":
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    if "RENDER" in os.environ:
        bot.remove_webhook()
        time.sleep(1)
        bot.set_webhook(url=f"https://musicbot-knqj.onrender.com/webhook/{TOKEN}")
        app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))
    else:
        bot.remove_webhook()
        bot.polling(none_stop=True)
