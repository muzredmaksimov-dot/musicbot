import os
import asyncio
import logging
import csv
import base64
import aiohttp
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = "8109304672:AAHkOQ8kzQLmHupii78YCd-1Q4HtDKWuuNk"
ADMIN_CHAT_ID = "866964827"
AUDIO_FOLDER = "tracks"
CSV_FILE = "backup_results.csv"
SUBSCRIBERS_FILE = "subscribers.txt"

GITHUB_REPO = "muzredmaksimov-dot/testmuzicbot_results"
GITHUB_TOKEN = os.environ.get("GITHUB_TOKEN")  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–¥–∞—Ç—å –≤ Render Secrets

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ë—É—Ñ–µ—Ä –¥–ª—è CSV
csv_buffer = []
BUFFER_SIZE = 10

# –ö—ç—à–∏
subscribers_cache = set()
csv_header = []

# –°–µ–º–∞—Ñ–æ—Ä
semaphore = asyncio.Semaphore(50)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ –æ—Ü–µ–Ω–∫–∞–º
RATING_GUIDE_MESSAGE = """
1Ô∏è‚É£ ‚Äî –ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è
2Ô∏è‚É£ ‚Äî –†–∞–Ω—å—à–µ –Ω—Ä–∞–≤–∏–ª–∞—Å—å, –Ω–æ –Ω–∞–¥–æ–µ–ª–∞
3Ô∏è‚É£ ‚Äî –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ
4Ô∏è‚É£ ‚Äî –ù—Ä–∞–≤–∏—Ç—Å—è
5Ô∏è‚É£ ‚Äî –õ—é–±–∏–º–∞—è –ø–µ—Å–Ω—è
"""

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# === –£–¢–ò–õ–ò–¢–´ ===
async def github_read_file(repo, path_in_repo, token):
    url = f"https://api.github.com/repos/{repo}/contents/{path_in_repo}"
    headers = {"Authorization": f"token {token}"} if token else {}
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    content = base64.b64decode(data["content"]).decode("utf-8")
                    return content
    except Exception as e:
        logger.error(f"GitHub READ error ({path_in_repo}): {e}")
        return ""

async def github_write_file(repo, path_in_repo, token, content_text, commit_message):
    url = f"https://api.github.com/repos/{repo}/contents/{path_in_repo}"
    headers = {"Authorization": f"token {token}", "Content-Type": "application/json"}
    payload = {
        "message": commit_message,
        "content": base64.b64encode(content_text.encode("utf-8")).decode("utf-8")
    }
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers) as get_resp:
                if get_resp.status == 200:
                    payload["sha"] = (await get_resp.json())["sha"]
            async with session.put(url, headers=headers, json=payload) as put_resp:
                return put_resp.status in (200, 201)
    except Exception as e:
        logger.error(f"GitHub WRITE error ({path_in_repo}): {e}")
        return False

async def flush_csv_buffer():
    if not csv_buffer:
        return
    try:
        # –õ–æ–∫–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å
        with open(CSV_FILE, "a", newline="", encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerows(csv_buffer)
        # GitHub –∑–∞–ø–∏—Å—å
        csv_content = "\n".join([",".join(map(str, row)) for row in csv_buffer])
        await github_write_file(GITHUB_REPO, CSV_FILE, GITHUB_TOKEN, csv_content + "\n", f"Update {CSV_FILE}")
        csv_buffer.clear()
    except Exception as e:
        logger.error(f"CSV flush error: {e}")

async def send_message(chat_id, text, reply_markup=None, parse_mode=None):
    try:
        msg = await bot.send_message(chat_id, text, reply_markup=reply_markup, parse_mode=parse_mode)
        return msg
    except Exception as e:
        logger.error(f"Send message error ({chat_id}): {e}")

# === START ===
@dp.message(Command("start"))
async def start(message: types.Message):
    chat_id = message.chat.id
    user = message.from_user

    if str(chat_id) not in subscribers_cache:
        subscribers_cache.add(str(chat_id))
        new_text = "\n".join(sorted(subscribers_cache))
        await github_write_file(GITHUB_REPO, SUBSCRIBERS_FILE, GITHUB_TOKEN, new_text, "Add subscriber")

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", callback_data="start_test")]
    ])
    await send_message(
        chat_id,
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üéµ\n\n"
        "–í—ã –ø—Ä–æ—Å–ª—É—à–∞–µ—Ç–µ 30 –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –∏ –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞–∂–¥—ã–π –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5.\n\n"
        "üéÅ –ü–æ—Å–ª–µ —Ç–µ—Å—Ç–∞ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ‚Äî —Ä–æ–∑—ã–≥—Ä—ã—à –ø–æ–¥–∞—Ä–∫–æ–≤!\n\n"
        "_–ù–∞–∂–∏–º–∞—è ¬´–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç¬ª, –≤—ã –¥–∞—ë—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö._",
        reply_markup=kb, parse_mode="Markdown"
    )

# === –¢–ï–°–¢ ===
@dp.callback_query(F.data == "start_test")
async def start_test(callback: types.CallbackQuery):
    chat_id = callback.message.chat.id
    user = callback.from_user

    user_states[chat_id] = {
        "user_data": {
            "user_id": chat_id,
            "username": user.username,
            "first_name": user.first_name,
            "last_name": user.last_name,
            "gender": "",
            "age": ""
        },
        "ratings": {},
        "current_track": 1
    }
    await callback.answer()
    await ask_gender(chat_id)

async def ask_gender(chat_id):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ú—É–∂—Å–∫–æ–π", callback_data="gender_M")],
        [InlineKeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_F")]
    ])
    await send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=kb)

@dp.callback_query(F.data.startswith("gender_"))
async def handle_gender(callback: types.CallbackQuery):
    chat_id = callback.message.chat.id
    gender = "–ú—É–∂—Å–∫–æ–π" if callback.data.endswith("M") else "–ñ–µ–Ω—Å–∫–∏–π"
    user_states[chat_id]["user_data"]["gender"] = gender
    await ask_age(chat_id)

async def ask_age(chat_id):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–¥–æ 24", callback_data="age_–¥–æ 24")],
        [InlineKeyboardButton(text="25-34", callback_data="age_25-34")],
        [InlineKeyboardButton(text="35-44", callback_data="age_35-44")],
        [InlineKeyboardButton(text="45+", callback_data="age_45+")]
    ])
    await send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:", reply_markup=kb)

@dp.callback_query(F.data.startswith("age_"))
async def handle_age(callback: types.CallbackQuery):
    chat_id = callback.message.chat.id
    age = callback.data.split("_", 1)[1]
    user_states[chat_id]["user_data"]["age"] = age
    username = user_states[chat_id]["user_data"].get("username") or user_states[chat_id]["user_data"]["first_name"]

    await send_message(chat_id, RATING_GUIDE_MESSAGE, parse_mode="Markdown")
    await asyncio.sleep(1)
    await send_message(chat_id, f"–°–ø–∞—Å–∏–±–æ, @{username}! üé∂\n\n–¢–µ–ø–µ—Ä—å –Ω–∞—á–Ω—ë–º —Ç–µ—Å—Ç. –£–¥–∞—á–∏! üéÅ")
    await asyncio.sleep(1)
    await send_track(chat_id)

async def send_track(chat_id):
    track_num = user_states[chat_id]['current_track']
    if track_num > 30:
        await finish_test(chat_id)
        return

    track_filename = f"{track_num:03d}.mp3"
    track_path = os.path.join(AUDIO_FOLDER, track_filename)

    await send_message(chat_id, f"üéµ –¢—Ä–µ–∫ {track_num}/30")

    if os.path.exists(track_path):
        try:
            with open(track_path, 'rb') as audio_file:
                await bot.send_audio(chat_id, audio_file, title=f"–¢—Ä–µ–∫ {track_num:03d}")
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=str(i), callback_data=f"rate_{i}") for i in range(1, 6)]
            ])
            await send_message(chat_id, "–û—Ü–µ–Ω–∏—Ç–µ —Ç—Ä–µ–∫:", reply_markup=kb)
        except Exception as e:
            await send_message(chat_id, f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–µ–∫–∞: {e}')
            user_states[chat_id]['current_track'] += 1
            await send_track(chat_id)
    else:
        await send_message(chat_id, f'‚ö†Ô∏è –¢—Ä–µ–∫ {track_num:03d} –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        user_states[chat_id]['current_track'] += 1
        await send_track(chat_id)

@dp.callback_query(F.data.startswith("rate_"))
async def rate(callback: types.CallbackQuery):
    chat_id = callback.message.chat.id
    r = int(callback.data.split("_")[1])
    t = user_states[chat_id]["current_track"]

    if 1 <= r <= 5:
        user_states[chat_id]["ratings"][str(t)] = r
        user_states[chat_id]["current_track"] += 1
        await callback.answer()
        await send_track(chat_id)
    else:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞!", show_alert=True)

async def finish_test(chat_id):
    user = user_states[chat_id]["user_data"]
    ratings = user_states[chat_id]["ratings"]

    track_ratings = [ratings.get(str(i), "") for i in range(1, 31)]
    row = [
        user["user_id"],
        user.get("username", ""),
        user.get("first_name", ""),
        user.get("last_name", ""),
        user["gender"],
        user["age"]
    ] + track_ratings

    csv_buffer.append(row)
    if len(csv_buffer) >= BUFFER_SIZE:
        await flush_csv_buffer()

    await send_message(chat_id, f'üéâ @{user.get("username") or user["first_name"]}, —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!\n\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ @RadioMIR_Efir üéÅ')
    user_states.pop(chat_id, None)

# === –ê–î–ú–ò–ù-–ö–û–ú–ê–ù–î–´ ===
@dp.message(Command("flush_buffer"))
async def flush_buffer_command(message: types.Message):
    chat_id = message.chat.id
    if str(chat_id) != ADMIN_CHAT_ID:
        await bot.send_message(chat_id, "‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    if not csv_buffer:
        await bot.send_message(chat_id, "üì≠ –ë—É—Ñ–µ—Ä –ø—É—Å—Ç. –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏.")
        return

    try:
        await flush_csv_buffer()
        await bot.send_message(chat_id, f'‚úÖ –ë—É—Ñ–µ—Ä –∑–∞–ø–∏—Å–∞–Ω —É—Å–ø–µ—à–Ω–æ! –§–∞–π–ª –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ GitHub.')
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {chat_id} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø–∏—Å–∞–ª –±—É—Ñ–µ—Ä")
    except Exception as e:
        await bot.send_message(chat_id, f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –±—É—Ñ–µ—Ä–∞: {e}')
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–ø–∏—Å–∏ –±—É—Ñ–µ—Ä–∞: {e}")

@dp.message(Command("reset_all"))
async def reset_all(message: types.Message):
    chat_id = message.chat.id
    if str(chat_id) != ADMIN_CHAT_ID:
        await bot.send_message(chat_id, "‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    args = message.text.split()
    announce = len(args) > 1 and args[1].lower() in ("announce", "1", "send")

    if csv_buffer:
        try:
            await flush_csv_buffer()
            logger.info(f"–ó–∞–ø–∏—Å–∞–Ω–æ {len(csv_buffer)} –∑–∞–ø–∏—Å–µ–π –ø–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –±—É—Ñ–µ—Ä–∞ –ø–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º: {e}")

    csv_buffer.clear()

    with open(CSV_FILE, "w", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow(["user_id", "username", "first_name", "last_name", "gender", "age"] + [f"track_{i}" for i in range(1, 31)])

    header_row = ",".join(["user_id", "username", "first_name", "last_name", "gender", "age"] + [f"track_{i}" for i in range(1, 31)]) + "\n"
    await github_write_file(GITHUB_REPO, CSV_FILE, GITHUB_TOKEN, header_row, "Reset CSV")

    if announce:
        sent_count = 0
        for s in subscribers_cache:
            try:
                kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", callback_data="start_test")]])
                await bot.send_message(int(s), "üéß –ù–æ–≤—ã–π –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —É–∂–µ –≥–æ—Ç–æ–≤!\n\n–ü—Ä–æ–π–¥–∏ –∏ –æ—Ü–µ–Ω–∏ 30 —Ç—Ä–µ–∫–æ–≤ ‚Äî —Ç–≤–æ—ë –º–Ω–µ–Ω–∏–µ –≤–∞–∂–Ω–æ –¥–ª—è —Ä–∞–¥–∏–æ –ú–ò–† üé∂", reply_markup=kb)
                sent_count += 1
                await asyncio.sleep(0.1)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫—É {s}: {e}")
        await bot.send_message(ADMIN_CHAT_ID, f'‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ({sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π).')
    else:
        await bot.send_message(ADMIN_CHAT_ID, "‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã (–±–µ–∑ —Ä–∞—Å—Å—ã–ª–∫–∏).")

@dp.message(Command("results"))
async def send_results(message: types.Message):
    chat_id = message.chat.id
    if str(chat_id) != ADMIN_CHAT_ID:
        await bot.send_message(chat_id, "‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    try:
        with open(CSV_FILE, "rb") as f:
            await bot.send_document(chat_id, f, caption="üìä –¢–µ–∫—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞")
    except Exception as e:
        await bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
        logger.error(f"Send results error: {e}")

# === MAIN ===
async def main():
    global subscribers_cache, csv_header

    subscribers_text = await github_read_file(GITHUB_REPO, SUBSCRIBERS_FILE, GITHUB_TOKEN)
    if subscribers_text:
        subscribers_cache = set(s.strip() for s in subscribers_text.split("\n") if s.strip())
    else:
        subscribers_cache = set()

    if os.path.exists(CSV_FILE):
        try:
            with open(CSV_FILE, "r", encoding="utf-8") as f:
                csv_header = next(csv.reader(f))
        except:
            csv_header = []
    else:
        csv_header = ["user_id", "username", "first_name", "last_name", "gender", "age"] + [f"track_{i}" for i in range(1, 31)]

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
