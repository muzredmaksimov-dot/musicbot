import os
import telebot
import time
import csv
from telebot import types
from flask import Flask, request
from datetime import datetime
import json
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = "8109304672:AAHkOQ8kzQLmHupii78YCd-1Q4HtDKWuuNk"
ADMIN_CHAT_ID = "866964827"
AUDIO_FOLDER = "tracks"
SPREADSHEET_NAME = "music_testing"
WORKSHEET_NAME = "track_list"

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# === GOOGLE SHEETS ===
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
worksheet = None

def initialize_google_sheets():
    global worksheet
    try:
        creds_json_str = os.environ.get('GOOGLE_CREDS_JSON')
        creds_b64 = os.environ.get('GOOGLE_CREDS_B64')

        if creds_json_str:
            creds_dict = json.loads(creds_json_str)
        elif creds_b64:
            import base64
            creds_dict = json.loads(base64.b64decode(creds_b64).decode('utf-8'))
        elif os.path.exists('creds.json'):
            with open('creds.json', 'r', encoding='utf-8') as f:
                creds_dict = json.load(f)
        else:
            print("‚ùå –ù–µ—Ç –∫–ª—é—á–∞ –¥–ª—è Google API")
            return False

        creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
        client = gspread.authorize(creds)
        spreadsheet = client.open(SPREADSHEET_NAME)
        worksheet = spreadsheet.worksheet(WORKSHEET_NAME)
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Google –¢–∞–±–ª–∏—Ü–µ!")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Google Sheets: {e}")
        return False

def save_to_google_sheets(user_data, ratings):
    if not worksheet:
        print("‚ùå Google –¢–∞–±–ª–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return False
    try:
        all_data = worksheet.get_all_values()
        next_col = len(all_data[0]) + 1 if all_data else 1

        user_info = [
            user_data['user_id'],
            f"@{user_data['username']}" if user_data.get('username') else user_data.get('first_name',''),
            user_data.get('last_name',''),
            user_data['gender'],
            user_data['age'],
            datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        ]

        for i in range(1,31):
            user_info.append(ratings.get(str(i), ''))

        for row_idx, value in enumerate(user_info, start=1):
            worksheet.update_cell(row_idx, next_col, value)

        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫–æ–ª–æ–Ω–∫—É {next_col}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google –¢–∞–±–ª–∏—Ü—É: {e}")
        return False

def save_to_csv_backup(user_data, ratings):
    try:
        file_exists = os.path.exists('backup_results.csv')
        with open('backup_results.csv','a',newline='',encoding='utf-8') as f:
            writer = csv.writer(f)
            if not file_exists:
                headers = ['user_id','username','first_name','last_name','gender','age','timestamp']
                for i in range(1,31):
                    headers.append(f'track_{i}')
                writer.writerow(headers)
            row_data = [
                user_data['user_id'],
                user_data.get('username',''),
                user_data.get('first_name',''),
                user_data.get('last_name',''),
                user_data['gender'],
                user_data['age'],
                datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            ]
            for i in range(1,31):
                row_data.append(ratings.get(str(i),''))
            writer.writerow(row_data)
        print("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ CSV")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ CSV: {e}")
        return False

# === –•–†–ê–ù–ò–õ–ò–©–ï ===
user_last_message = {}
user_rating_guide = {}
user_rating_time = {}
user_states = {}

# === –†–ê–°–®–ò–§–†–û–í–ö–ê –û–¶–ï–ù–û–ö ===
RATING_GUIDE_MESSAGE = """
üéµ **–®–∫–∞–ª–∞ –æ—Ü–µ–Ω–æ–∫:**

1Ô∏è‚É£ ‚òÖ - –°–æ–≤—Å–µ–º –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è
2Ô∏è‚É£ ‚òÖ‚òÖ - –°–∫–æ—Ä–µ–µ –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è  
3Ô∏è‚É£ ‚òÖ‚òÖ‚òÖ - –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ
4Ô∏è‚É£ ‚òÖ‚òÖ‚òÖ‚òÖ - –ù—Ä–∞–≤–∏—Ç—Å—è
5Ô∏è‚É£ ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ - –û—á–µ–Ω—å –Ω—Ä–∞–≤–∏—Ç—Å—è

–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞:
"""

# === –°–õ–£–ñ–ï–ë–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
def send_message(chat_id, text, reply_markup=None, parse_mode=None):
    try:
        msg = bot.send_message(chat_id, text, reply_markup=reply_markup, parse_mode=parse_mode)
        user_last_message.setdefault(chat_id, []).append(msg.message_id)
        return msg
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

def cleanup_chat(chat_id, keep_rating_guide=False):
    if chat_id in user_last_message:
        try:
            rating_guide_id = user_rating_guide.get(chat_id)
            messages_to_keep = [rating_guide_id] if keep_rating_guide and rating_guide_id else []
            for msg_id in user_last_message[chat_id]:
                if msg_id not in messages_to_keep:
                    try: bot.delete_message(chat_id,msg_id)
                    except: pass
            user_last_message[chat_id] = messages_to_keep
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–∞: {e}")

def send_rating_guide(chat_id):
    if chat_id in user_rating_guide:
        try: bot.delete_message(chat_id, user_rating_guide[chat_id])
        except: pass
    msg = send_message(chat_id, RATING_GUIDE_MESSAGE, parse_mode='Markdown')
    if msg: user_rating_guide[chat_id] = msg.message_id

# === –ö–û–ú–ê–ù–î–ê START ===
@bot.message_handler(commands=['start'])
def handle_start(message):
    chat_id = message.chat.id
    user = message.from_user
    cleanup_chat(chat_id, keep_rating_guide=True)
    user_states[chat_id] = {
        'user_data': {
            'user_id': chat_id,
            'username': user.username,
            'first_name': user.first_name,
            'last_name': user.last_name,
            'gender':'',
            'age':''
        },
        'ratings':{},
        'current_track':1
    }
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", callback_data="start_test"))
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üéµ\n\n"
        "–í—ã –ø—Ä–æ—Å–ª—É—à–∞–µ—Ç–µ 30 –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ –∏ –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞–∂–¥—ã–π –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5.\n\n"
        "üéÅ –ü–æ—Å–ª–µ —Ç–µ—Å—Ç–∞ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±—É–¥–µ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à –ø–æ–¥–∞—Ä–∫–æ–≤!"
    )
    send_message(chat_id, welcome_text, reply_markup=kb)

@bot.callback_query_handler(func=lambda call: call.data=="start_test")
def handle_start_button(call):
    chat_id = call.message.chat.id
    try: bot.delete_message(chat_id, call.message.message_id)
    except: pass
    cleanup_chat(chat_id)
    ask_gender(chat_id)

def ask_gender(chat_id):
    kb = types.InlineKeyboardMarkup()
    kb.add(
        types.InlineKeyboardButton("–ú—É–∂—Å–∫–æ–π", callback_data="gender_M"),
        types.InlineKeyboardButton("–ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_F")
    )
    send_message(chat_id,"–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data.startswith("gender_"))
def handle_gender(c):
    chat_id = c.message.chat.id
    gender = c.data.split("_",1)[1]
    user_states[chat_id]['user_data']['gender'] = gender
    try: bot.delete_message(chat_id,c.message.message_id)
    except: pass
    cleanup_chat(chat_id)
    ask_age(chat_id)

def ask_age(chat_id):
    opts = ["–¥–æ 24","25-34","35-44","45-54","55+"]
    kb = types.InlineKeyboardMarkup(row_width=2)
    buttons = [types.InlineKeyboardButton(o, callback_data=f"age_{o}") for o in opts]
    kb.add(*buttons)
    send_message(chat_id,"–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data.startswith("age_"))
def handle_age(c):
    chat_id = c.message.chat.id
    age = c.data.split("_",1)[1]
    user_states[chat_id]['user_data']['age'] = age
    try: bot.delete_message(chat_id,c.message.message_id)
    except: pass
    cleanup_chat(chat_id)
    username_display = f"@{user_states[chat_id]['user_data']['username']}" if user_states[chat_id]['user_data']['username'] else user_states[chat_id]['user_data']['first_name']
    send_message(chat_id,f"–°–ø–∞—Å–∏–±–æ, {username_display}! üé∂\n\n–¢–µ–ø–µ—Ä—å –Ω–∞—á–Ω–µ–º —Ç–µ—Å—Ç. –£–¥–∞—á–∏! üéÅ")
    send_rating_guide(chat_id)
    send_track(chat_id)

# === –û–¢–ü–†–ê–í–ö–ê –¢–†–ï–ö–û–í ===
def send_track(chat_id):
    cleanup_chat(chat_id, keep_rating_guide=True)
    track_num = user_states[chat_id]['current_track']
    if track_num>30: finish_test(chat_id); return
    track_filename = f"{track_num:03d}.mp3"
    track_path = os.path.join(AUDIO_FOLDER, track_filename)
    send_message(chat_id,f"üéµ –¢—Ä–µ–∫ {track_num}/30")
    if os.path.exists(track_path):
        try:
            with open(track_path,'rb') as audio_file:
                audio_msg = bot.send_audio(chat_id,audio_file,title=f"–¢—Ä–µ–∫ {track_num:03d}")
                user_last_message.setdefault(chat_id,[]).append(audio_msg.message_id)
                kb = types.InlineKeyboardMarkup(row_width=5)
                buttons = [types.InlineKeyboardButton(str(i), callback_data=f"rate_{i}") for i in range(1,6)]
                kb.add(*buttons)
                rating_msg = bot.send_message(chat_id,"–û—Ü–µ–Ω–∏—Ç–µ —Ç—Ä–µ–∫:",reply_markup=kb)
                user_last_message[chat_id].append(rating_msg.message_id)
        except Exception as e:
            send_message(chat_id,f"‚ùå –û—à–∏–±–∫–∞: {e}")
            user_states[chat_id]['current_track']+=1
            send_track(chat_id)
    else:
        send_message(chat_id,f"‚ö†Ô∏è –¢—Ä–µ–∫ {track_num:03d} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        user_states[chat_id]['current_track']+=1
        send_track(chat_id)

# === –û–ë–†–ê–ë–û–¢–ö–ê –û–¶–ï–ù–ö–ò ===
@bot.callback_query_handler(func=lambda c: c.data.startswith("rate_"))
def handle_rating(c):
    chat_id = c.message.chat.id
    rating = int(c.data.split("_")[1])
    track_num = user_states[chat_id]['current_track']
    current_time = time.time()
    if current_time - user_rating_time.get(chat_id,0) < 2:
        bot.answer_callback_query(c.id,"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ—Å–ª—É—à–∞–π—Ç–µ —Ç—Ä–µ–∫")
        return
    user_rating_time[chat_id]=current_time
    user_states[chat_id]['ratings'][str(track_num)] = rating
    try: bot.delete_message(chat_id,c.message.message_id)
    except: pass
    user_states[chat_id]['current_track']+=1
    cleanup_chat(chat_id, keep_rating_guide=True)
    send_track(chat_id)

def finish_test(chat_id):
    user_data = user_states[chat_id]['user_data']
    ratings = user_states[chat_id]['ratings']
    google_success = save_to_google_sheets(user_data, ratings)
    csv_success = save_to_csv_backup(user_data, ratings)
    username_display = f"@{user_data['username']}" if user_data['username'] else user_data['first_name']
    if google_success:
        send_message(chat_id,f"üéâ {username_display}, —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!\n\n–°–ª–µ–¥–∏ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ @RadioMlR_Efir –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –ø–æ–¥–∞—Ä–∫–æ–≤! üéÅ")
    elif csv_success:
        send_message(chat_id,f"üéâ {username_display}, —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ CSV.\n\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –ø–æ–¥–∞—Ä–∫–æ–≤! üéÅ")
    else:
        send_message(chat_id,"‚ö†Ô∏è –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.")

# === FLASK WEBHOOK ===
@app.route(f'/webhook/{TOKEN}', methods=['POST'])
def webhook():
    if request.headers.get('content-type')=='application/json':
        update = telebot.types.Update.de_json(request.get_data().decode('utf-8'))
        bot.process_new_updates([update])
        return ''
    return 'Bad Request',400

@app.route('/')
def index(): return 'Music Test Bot running!'
@app.route('/health')
def health(): return 'OK'

# === –ó–ê–ü–£–°–ö ===
if __name__=="__main__":
    initialize_google_sheets()
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    if 'RENDER' in os.environ:
        port = int(os.environ.get('PORT',10000))
        try:
            bot.remove_webhook()
            time.sleep(1)
            bot.set_webhook(url=f"https://musicbot-knqj.onrender.com/webhook/{TOKEN}")
        except Exception as e: print(f"‚ùå –í–µ–±—Ö—É–∫: {e}")
        app.run(host='0.0.0.0', port=port)
    else:
        bot.remove_webhook()
        bot.polling(none_stop=True)
