import telebot
import csv
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import os
from telebot import types
from datetime import datetime
from flask import Flask, request
import json
import glob

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = '8109304672:AAHkOQ8kzQLmHupii78YCd-1Q4HtDKWuuNk'
AUDIO_FOLDER = 'audio'
SPREADSHEET_NAME = 'music_testing'
WORKSHEET_NAME = 'track_list'

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# === Google Sheets –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ===
scope = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/drive"
]

worksheet = None
track_data = {}         # mapping track_number (str) -> title (from CSV)
MAX_TRACK = 0           # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –æ–∂–∏–¥–∞–µ–º—ã–π –Ω–æ–º–µ—Ä —Ç—Ä–µ–∫–∞ (int)

# --- —Å–æ—Å—Ç–æ—è–Ω–∏—è (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏) ---
user_progress     = {}   # –∫–∞–∫–æ–π —Ç—Ä–µ–∫ —É –∫–æ–≥–æ —Å–µ–π—á–∞—Å (int)
user_ratings      = {}   # dict: chat_id -> {track_num_str: rating}
user_metadata     = {}   # dict: chat_id -> {'username':..., 'gender':..., 'age':...}
last_audios       = {}   # message_id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞—É–¥–∏–æ

# === –§—É–Ω–∫—Ü–∏–∏ Google Sheets & CSV (–≤–∑—è—Ç—ã–µ –∏–∑ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞) ===
def initialize_google_sheets():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google –¢–∞–±–ª–∏—Ü–∞–º.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç env GOOGLE_CREDS_JSON, GOOGLE_CREDS_B64, –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π creds.json.
    """
    global worksheet
    try:
        creds_json_str = os.environ.get('GOOGLE_CREDS_JSON')
        creds_b64 = os.environ.get('GOOGLE_CREDS_B64')

        if creds_json_str:
            creds_dict = json.loads(creds_json_str)
        elif creds_b64:
            import base64
            creds_dict = json.loads(base64.b64decode(creds_b64).decode('utf-8'))
        elif os.path.exists('creds.json'):
            with open('creds.json', 'r', encoding='utf-8') as f:
                creds_dict = json.load(f)
        else:
            print("‚ùå –ù–µ—Ç –∫–ª—é—á–∞ –¥–ª—è Google API: –∑–∞–¥–∞–π—Ç–µ GOOGLE_CREDS_JSON –∏–ª–∏ GOOGLE_CREDS_B64, –∏–ª–∏ –ø–æ–ª–æ–∂–∏—Ç–µ creds.json")
            worksheet = None
            return False

        creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
        client = gspread.authorize(creds)
        spreadsheet = client.open(SPREADSHEET_NAME)
        worksheet = spreadsheet.worksheet(WORKSHEET_NAME)
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Google –¢–∞–±–ª–∏—Ü–µ!")
        return True

    except Exception as e:
        worksheet = None
        print(f"‚ùå –û—à–∏–±–∫–∞ Google Sheets: {e}")
        return False

def save_to_google_sheets(user_data, ratings):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Google –¢–∞–±–ª–∏—Ü—É (–∫–∞–∫ –≤ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º –∫–æ–¥–µ)."""
    if not worksheet:
        print("‚ùå Google –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å –≤ Google")
        return False

    try:
        all_data = worksheet.get_all_values()
        next_col = len(all_data[0]) + 1 if all_data and all_data[0] else 1

        user_info = [
            user_data['user_id'],
            f"@{user_data.get('username', '')}",
            user_data.get('gender', ''),
            user_data.get('age', ''),
            datetime.now().isoformat()
        ]

        for i in range(1, MAX_TRACK + 1):
            user_info.append(ratings.get(str(i), ''))

        for row_idx, value in enumerate(user_info, start=1):
            worksheet.update_cell(row_idx, next_col, value)

        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫–æ–ª–æ–Ω–∫—É {next_col} Google Sheets")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Google –¢–∞–±–ª–∏—Ü—É: {e}")
        return False

def save_to_csv_backup(user_data, ratings):
    """–†–µ–∑–µ—Ä–≤–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ CSV (–∫–∞–∫ –≤ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º –∫–æ–¥–µ)."""
    try:
        file_exists = os.path.exists('backup_results.csv')
        with open('backup_results.csv', 'a', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)

            if not file_exists:
                headers = ['user_id', 'username', 'gender', 'age', 'timestamp']
                for i in range(1, MAX_TRACK + 1):
                    headers.append(f'track_{i}')
                writer.writerow(headers)

            row_data = [
                user_data['user_id'],
                user_data.get('username', ''),
                user_data.get('gender', ''),
                user_data.get('age', ''),
                datetime.now().isoformat()
            ]

            for i in range(1, MAX_TRACK + 1):
                row_data.append(ratings.get(str(i), ''))

            writer.writerow(row_data)

        print("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ CSV –±—ç–∫–∞–ø")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ CSV: {e}")
        return False

# === –£—Ç–∏–ª–∏—Ç—ã —Ç—Ä–µ–∫–æ–≤ ===
def list_audio_files():
    if not os.path.isdir(AUDIO_FOLDER):
        print(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ audio –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {AUDIO_FOLDER}")
        return []
    files = glob.glob(os.path.join(AUDIO_FOLDER, '**', '*.mp3'), recursive=True)
    files_sorted = sorted(files)
    print(f"üîé –ù–∞–π–¥–µ–Ω–æ {len(files_sorted)} mp3 –≤ '{AUDIO_FOLDER}':")
    for p in files_sorted:
        print("   ", os.path.relpath(p))
    return files_sorted

def load_track_data():
    """–ó–∞–≥—Ä—É–∑–∏–º CSV –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏ –≤—ã—á–∏—Å–ª–∏–º MAX_TRACK –ø–æ —Ñ–∞–π–ª–∞–º/CSV."""
    global track_data, MAX_TRACK
    track_data = {}
    MAX_TRACK = 0
    try:
        # –ª–∏—Å—Ç–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        list_audio_files()

        if os.path.exists('track_list.csv'):
            with open('track_list.csv', newline='', encoding='utf-8') as f:
                reader = csv.DictReader(f)
                for row in reader:
                    tn = row.get('track_number')
                    title = row.get('title', '')
                    if tn:
                        tn_stripped = tn.strip()
                        track_data[tn_stripped] = title
            if track_data:
                try:
                    MAX_TRACK = max(int(k) for k in track_data.keys())
                except Exception:
                    MAX_TRACK = len(track_data)

        else:
            # –µ—Å–ª–∏ CSV –Ω–µ—Ç ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å MAX_TRACK –ø–æ —Ñ–∞–π–ª–∞–º –≤ –ø–∞–ø–∫–µ audio
            files = list_audio_files()
            for f in files:
                bn = os.path.basename(f)
                name, _ = os.path.splitext(bn)
                # –∏—â–µ–º –ø–µ—Ä–≤—ã–µ —Ü–∏—Ñ—Ä—ã –≤ –∏–º–µ–Ω–∏
                digits = ''.join(ch for ch in name.split()[0] if ch.isdigit())
                if digits:
                    try:
                        num = int(digits)
                        track_data[str(num)] = bn
                    except Exception:
                        continue
            if track_data:
                MAX_TRACK = max(int(k) for k in track_data.keys())

        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(track_data)} —Ç—Ä–µ–∫–æ–≤ (MAX_TRACK={MAX_TRACK})")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–æ–≤: {e}")
        track_data = {}
        MAX_TRACK = 0
        return False

# === –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å / flow ‚Äî –≤–∑—è—Ç–æ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–¥–∞ (–æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–µ–∫–æ–≤) ===
@bot.message_handler(func=lambda message: message.chat.id not in user_metadata)
def welcome_handler(message):
    chat_id = message.chat.id
    user_metadata[chat_id] = {'username': message.from_user.username}
    remove_kb = types.ReplyKeyboardRemove()
    bot.send_message(chat_id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç!", reply_markup=remove_kb)

    welcome_text = (
        "–¢—ã —É—Å–ª—ã—à–∏—à—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ç—Ä–µ–∫–æ–≤. –û—Ü–µ–Ω–∏ –∫–∞–∂–¥—ã–π –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5:\n\n"
        "–ù–æ —Å–Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è üôÇ"
    )

    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å", callback_data="start_test"))
    bot.send_message(chat_id, welcome_text, reply_markup=kb)

@bot.callback_query_handler(func=lambda call: call.data == 'start_test')
def handle_start_button(call):
    chat_id = call.message.chat.id
    try:
        bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=None)
    except Exception:
        pass

    # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_metadata[chat_id].setdefault('gender', None)
    user_metadata[chat_id].setdefault('age', None)
    user_progress[chat_id] = 1
    user_ratings[chat_id] = {}
    last_audios[chat_id] = None

    ask_gender(chat_id)

def ask_gender(chat_id):
    kb = types.InlineKeyboardMarkup()
    kb.add(
        types.InlineKeyboardButton("–ú—É–∂—Å–∫–æ–π", callback_data="gender_M"),
        types.InlineKeyboardButton("–ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_F")
    )
    bot.send_message(chat_id, "–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data.startswith("gender_"))
def handle_gender(c):
    chat_id = c.message.chat.id
    user_metadata[chat_id]['gender'] = c.data.split('_',1)[1]
    try:
        bot.delete_message(chat_id, c.message.message_id)
    except Exception:
        pass
    ask_age(chat_id)

def ask_age(chat_id):
    opts = ["–¥–æ 24","25-34","35-44","45-54","55+"]
    kb = types.InlineKeyboardMarkup(row_width=3)
    for o in opts:
        kb.add(types.InlineKeyboardButton(o, callback_data=f"age_{o}"))
    bot.send_message(chat_id, "–£–∫–∞–∂–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data.startswith("age_"))
def handle_age(c):
    chat_id = c.message.chat.id
    user_metadata[chat_id]['age'] = c.data.split('_',1)[1]
    try:
        bot.delete_message(chat_id, c.message.message_id)
    except Exception:
        pass

    # —Å—Ç–∞—Ä—Ç —Ç–µ—Å—Ç–∞ (—Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —Ç—Ä–µ–∫–∞)
    bot.send_message(chat_id, "–û—Ü–µ–Ω–∏ —Ç—Ä–µ–∫ –æ—Ç 1 –¥–æ 5:\n\n1 ‚Äî –ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è\n2 ‚Äî –†–∞–Ω—å—à–µ –Ω—Ä–∞–≤–∏–ª–∞—Å—å, –Ω–æ –Ω–∞–¥–æ–µ–ª–∞\n3 ‚Äî –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ\n4 ‚Äî –ù—Ä–∞–≤–∏—Ç—Å—è\n5 ‚Äî –õ—é–±–∏–º–∞—è –ø–ø–µ—Å–Ω—è")
    send_next_track(chat_id)

def send_next_track(chat_id):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç–∞—Ä–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –∫–æ–¥–∞ (001.mp3, 002.mp3...)."""
    n = user_progress.get(chat_id, 1)
    path = os.path.join(AUDIO_FOLDER, f"{n:03d}.mp3")
    print(f"[send_next_track] chat={chat_id} –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {path}")
    if not os.path.exists(path):
        # –Ω–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞ -> —Å—á–∏—Ç–∞–µ–º —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–º
        bot.send_message(chat_id, "üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –°–æ—Ö—Ä–∞–Ω—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
        # –≥–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        user_data = {
            'user_id': chat_id,
            'username': user_metadata.get(chat_id, {}).get('username', ''),
            'gender': user_metadata.get(chat_id, {}).get('gender', ''),
            'age': user_metadata.get(chat_id, {}).get('age', '')
        }
        ratings = user_ratings.get(chat_id, {})
        google_success = save_to_google_sheets(user_data, ratings)
        csv_success = save_to_csv_backup(user_data, ratings)
        if google_success:
            bot.send_message(chat_id, "‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Google –¢–∞–±–ª–∏—Ü—É.")
        elif csv_success:
            bot.send_message(chat_id, "‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª.")
        else:
            bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
        # –æ—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        try:
            del user_progress[chat_id]
            del user_ratings[chat_id]
            del user_metadata[chat_id]
            del last_audios[chat_id]
        except Exception:
            pass
        return

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ
    try:
        with open(path, 'rb') as f:
            m = bot.send_audio(chat_id, f, caption=f"–¢—Ä–µ–∫ ‚Ññ{n}")
            last_audios[chat_id] = m.message_id
    except Exception as e:
        print(f"[send_next_track] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {path}: {e}")
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–µ–∫–∞ #{n}: {e}")
        return

    # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ 1..5
    kb = types.InlineKeyboardMarkup(row_width=5)
    for i in range(1,6):
        kb.add(types.InlineKeyboardButton(str(i), callback_data=f"rate_{i}"))
    bot.send_message(chat_id, "–û—Ü–µ–Ω–∏—Ç–µ:", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data.startswith("rate_"))
def handle_rate(c):
    chat_id = c.message.chat.id
    # –∑–∞—â–∏—Ç–∞
    if chat_id not in user_progress:
        bot.answer_callback_query(c.id, "–¢–µ—Å—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start –∏–ª–∏ –ù–∞—á–∞—Ç—å.", show_alert=True)
        return

    n = user_progress.get(chat_id, 1)
    # –µ—Å–ª–∏ –æ—Ü–µ–Ω–∫–∞ —É–∂–µ –µ—Å—Ç—å ‚Äî –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
    if str(n) in user_ratings.get(chat_id, {}):
        bot.answer_callback_query(c.id, "–£–∂–µ –æ—Ü–µ–Ω–µ–Ω–æ", show_alert=True)
        return

    score = c.data.split('_',1)[1]

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É –≤ –ø–∞–º—è—Ç—å
    user_ratings.setdefault(chat_id, {})[str(n)] = score

    # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞—É–¥–∏–æ/–∫–Ω–æ–ø–∫–∞–º–∏ (–ø–æ–ø—ã—Ç–∫–∏, –≤ try)
    try:
        if last_audios.get(chat_id):
            bot.delete_message(chat_id, last_audios[chat_id])
    except Exception:
        pass
    try:
        bot.delete_message(chat_id, c.message.message_id)
    except Exception:
        pass

    # –∏–¥–µ–º –¥–∞–ª—å—à–µ
    user_progress[chat_id] = n + 1
    send_next_track(chat_id)

@bot.message_handler(func=lambda m: True)
def fallback(m):
    bot.send_message(m.chat.id,"–ù–∞–∂–º–∏—Ç–µ /start –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å")

# === –í–µ–±—Ö—É–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
@app.route('/webhook/' + TOKEN, methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return ''
    return 'Bad Request', 400

@app.route('/')
def index():
    return 'Music Test Bot is running!'

@app.route('/health')
def health():
    return 'OK'

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
    gs_ok = initialize_google_sheets()
    csv_ok = load_track_data()
    print(f"[INIT] GoogleSheets ok={gs_ok}, Tracks loaded ok={csv_ok}, MAX_TRACK={MAX_TRACK}")

    if 'RENDER' in os.environ:
        print("üåê –ó–∞–ø—É—Å–∫ –Ω–∞ Render (–≤–µ–±—Ö—É–∫)")
        port = int(os.environ.get('PORT', 10000))
        app.run(host='0.0.0.0', port=port)
    else:
        print("üíª –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ (polling)")
        bot.remove_webhook()
        bot.polling(none_stop=True)
