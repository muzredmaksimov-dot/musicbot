import telebot
import csv
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import os

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = '8109304672:AAHkOQ8kzQLmHupii78YCd-1Q4HtDKWuuNk'
AUDIO_FOLDER = 'audio'
SPREADSHEET_NAME = 'music_testing'
WORKSHEET_NAME = 'track_list'

# === Google Sheets –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ===
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("creds.json", scope)
client = gspread.authorize(creds)
sheet = client.open(SPREADSHEET_NAME).worksheet(WORKSHEET_NAME)

# === –ó–∞–≥—Ä—É–∑–∫–∞ CSV-—Ñ–∞–π–ª–∞ —Å —Ç—Ä–µ–∫–∞–º–∏ ===
with open('track_list.csv', newline='', encoding='utf-8') as f:
    reader = csv.DictReader(f)
    track_data = {row['track_number']: row['title'] for row in reader}

# === –ë–æ—Ç ===
import telebot
from telebot import types
import os

bot = telebot.TeleBot(TOKEN)

# === –°–ª–æ–≤–∞—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è ===
user_progress     = {}   # –∫–∞–∫–æ–π —Ç—Ä–µ–∫ —É –∫–æ–≥–æ —Å–µ–π—á–∞—Å
user_rated_tracks = {}   # —á—Ç–æ —É–∂–µ –æ—Ü–µ–Ω–µ–Ω–æ
user_metadata     = {}   # –ø–æ–ª/–≤–æ–∑—Ä–∞—Å—Ç
user_column       = {}   # —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
last_audios       = {}   # message_id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞—É–¥–∏–æ

# === –í—Å–ø–æ–º–æ–≥–∞–ª–∫–∏ ===
def insert_values_into_column(sheet, col, values):
    for i, v in enumerate(values, start=1):
        sheet.update_cell(i, col, v)

# === –û–ø—Ä–æ—Å –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º ===
from telebot import types

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª—é–±–æ–µ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(func=lambda message: message.chat.id not in user_metadata)
def welcome_handler(message):
    chat_id = message.chat.id

    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ –±—ã–ª–∞
    remove_kb = types.ReplyKeyboardRemove()
    bot.send_message(chat_id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç!", reply_markup=remove_kb)

    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–æ–π
    welcome_text = (
        "–¢—ã —É—Å–ª—ã—à–∏—à—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ç—Ä–µ–∫–æ–≤. –û—Ü–µ–Ω–∏ –∫–∞–∂–¥—ã–π –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5:\n\n"
        "–ù–æ —Å–Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è üôÇ"
    )

    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å", callback_data="start_test"))

    bot.send_message(chat_id, welcome_text, reply_markup=kb)
    user_metadata[chat_id] = None  # —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª–æ—Å—å

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å"
@bot.callback_query_handler(func=lambda call: call.data == 'start_test')
def handle_start_button(call):
    chat_id = call.message.chat.id

    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É (–æ—Å—Ç–∞–≤–ª—è—è —Å–æ–æ–±—â–µ–Ω–∏–µ)
    bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=None)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
    user_metadata[chat_id] = {}
    user_progress[chat_id] = 0
    user_rated_tracks[chat_id] = set()
    ask_gender(chat_id)

# –ó–∞–ø—Ä–æ—Å –ø–æ–ª–∞
def ask_gender(chat_id):
    kb = types.InlineKeyboardMarkup()
    kb.add(
        types.InlineKeyboardButton("–ú—É–∂—Å–∫–æ–π", callback_data="gender_M"),
        types.InlineKeyboardButton("–ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_F")
    )
    bot.send_message(chat_id, "–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data.startswith("gender_"))
def handle_gender(c):
    chat_id = c.message.chat.id
    user_metadata[chat_id]['gender'] = c.data.split('_',1)[1]
    bot.delete_message(chat_id, c.message.message_id)
    ask_age(chat_id)

def ask_age(chat_id):
    opts = ["–¥–æ 24","25-34","35-44","45-54","55+"]
    kb = types.InlineKeyboardMarkup(row_width=3)
    for o in opts:
        kb.add(types.InlineKeyboardButton(o, callback_data=f"age_{o}"))
    bot.send_message(chat_id, "–£–∫–∞–∂–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data.startswith("age_"))
def handle_age(c):
    chat_id = c.message.chat.id
    user_metadata[chat_id]['age'] = c.data.split('_',1)[1]
    bot.delete_message(chat_id, c.message.message_id)

    # --- –≤—ã–¥–µ–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü ---
    headers = sheet.row_values(1)
    col = len(headers) + 1
    user_column[chat_id] = col

    # --- –ø–∏—à–µ–º –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—é ---
    insert_values_into_column(sheet, col, [
        user_metadata[chat_id]['gender'],
        user_metadata[chat_id]['age']
    ])

    # --- –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤ —ç—Ç–æ–º —Å—Ç–æ–ª–±—Ü–µ –Ω–æ–º–µ—Ä–∞+–Ω–∞–∑–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–æ–≤ ---
    # (—Å—Ç—Ä–æ–∫–∏ 3.. )
    track_rows = sheet.get_all_values()[2:]  # skip first 2
    # –µ—Å–ª–∏ –µ—â—ë –ø—É—Å—Ç–æ ‚Äî –∑–∞–ø–æ–ª–Ω—è–µ–º
    if not any(track_rows and row[0] for row in track_rows):
        for num, title in track_data.items():
            r = int(num) + 2
            sheet.update_cell(r, 1, num)
            sheet.update_cell(r, 2, title)

    # --- –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç ---
    user_progress[chat_id] = 1
    bot.send_message(chat_id, "–û—Ü–µ–Ω–∏ —Ç—Ä–µ–∫ –æ—Ç 1 –¥–æ 5:\n\n1 ‚Äî –ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è\n2 ‚Äî –†–∞–Ω—å—à–µ –Ω—Ä–∞–≤–∏–ª–∞—Å—å, –Ω–æ –Ω–∞–¥–æ–µ–ª–∞\n3 ‚Äî –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ\n4 ‚Äî –ù—Ä–∞–≤–∏—Ç—Å—è\n5 ‚Äî –õ—é–±–∏–º–∞—è –ø–ø–µ—Å–Ω—è")
    send_next_track(chat_id)

# === –û—Ç–ø—Ä–∞–≤–∫–∞ –∏ –æ—Ü–µ–Ω–∫–∞ —Ç—Ä–µ–∫–æ–≤ ===
def send_next_track(chat_id):
    n = user_progress.get(chat_id,1)
    path = os.path.join(AUDIO_FOLDER,f"{n:03}.mp3")
    if not os.path.exists(path):
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", callback_data="restart"))
        bot.send_message(chat_id, "–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –°–ø–∞—Å–∏–±–æ!", reply_markup=kb)
        return

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ
    with open(path,'rb') as f:
        m = bot.send_audio(chat_id,f,caption=f"–¢—Ä–µ–∫ ‚Ññ{n}")
        last_audios[chat_id] = m.message_id

    # –∫–Ω–æ–ø–∫–∏
    kb = types.InlineKeyboardMarkup(row_width=5)
    for i in range(1,6):
        kb.add(types.InlineKeyboardButton(str(i),callback_data=f"rate_{i}"))
    bot.send_message(chat_id,"–û—Ü–µ–Ω–∏—Ç–µ:",reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data.startswith("rate_"))
def handle_rate(c):
    chat_id = c.message.chat.id
    n = user_progress.get(chat_id,1)
    if n in user_rated_tracks[chat_id]:
        bot.answer_callback_query(c.id,"–£–∂–µ –æ—Ü–µ–Ω–µ–Ω–æ",show_alert=True)
        return

    score = c.data.split('_',1)[1]
    col = user_column[chat_id]
    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ü–µ–Ω–∫—É –≤ —Å—Ç—Ä–æ–∫—É n+2
    sheet.update_cell(n+2, col, score)

    user_rated_tracks[chat_id].add(n)
    # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞—É–¥–∏–æ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
    try: bot.delete_message(chat_id, last_audios[chat_id])
    except: pass
    try: bot.delete_message(chat_id, c.message.message_id)
    except: pass

    user_progress[chat_id] = n+1
    send_next_track(chat_id)

@bot.callback_query_handler(func=lambda c: c.data=="restart")
def handle_restart(c):
    chat_id = c.message.chat.id
    bot.delete_message(chat_id, c.message.message_id)
    start(c.message)

@bot.message_handler(func=lambda m: True)
def fallback(m):
    bot.send_message(m.chat.id,"–ù–∞–∂–º–∏—Ç–µ /start")

bot.polling()