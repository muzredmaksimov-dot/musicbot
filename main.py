import telebot
import csv
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import os
from telebot import types
from datetime import datetime

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = '8109304672:AAHkOQ8kzQLmHupii78YCd-1Q4HtDKWuuNk'
AUDIO_FOLDER = 'audio'
SPREADSHEET_NAME = 'music_testing'
WORKSHEET_NAME = 'track_list'

# === Google Sheets –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ===
scope = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/drive"
]

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ creds.json
if not os.path.exists('creds.json'):
    print("–û—à–∏–±–∫–∞: –§–∞–π–ª creds.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
else:
    try:
        creds = ServiceAccountCredentials.from_json_keyfile_name('creds.json', scope)
        client = gspread.authorize(creds)
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        try:
            spreadsheet = client.open(SPREADSHEET_NAME)
            worksheet = spreadsheet.worksheet(WORKSHEET_NAME)
            print("–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Google –¢–∞–±–ª–∏—Ü–µ!")
        except gspread.SpreadsheetNotFound:
            print(f"–¢–∞–±–ª–∏—Ü–∞ '{SPREADSHEET_NAME}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        except gspread.WorksheetNotFound:
            print(f"–õ–∏—Å—Ç '{WORKSHEET_NAME}' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")

# === –ó–∞–≥—Ä—É–∑–∫–∞ CSV-—Ñ–∞–π–ª–∞ —Å —Ç—Ä–µ–∫–∞–º–∏ ===
try:
    with open('track_list.csv', newline='', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        track_data = {row['track_number']: row['title'] for row in reader}
    print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(track_data)} —Ç—Ä–µ–∫–æ–≤")
except FileNotFoundError:
    track_data = {}
    print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: track_list.csv –Ω–µ –Ω–∞–π–¥–µ–Ω")
except Exception as e:
    track_data = {}
    print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ track_list.csv: {e}")

# === –ë–æ—Ç ===
bot = telebot.TeleBot(TOKEN)

# === –°–ª–æ–≤–∞—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è ===
user_states = {}

def save_to_google_sheets(user_data, ratings):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Google –¢–∞–±–ª–∏—Ü—É"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        all_data = worksheet.get_all_values()
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π —Å–≤–æ–±–æ–¥–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü
        if not all_data:
            next_col = 1
        else:
            next_col = len(all_data[0]) + 1
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
        user_info = [
            user_data['user_id'],
            f"@{user_data['username']}" if user_data.get('username') else '',
            user_data['gender'],
            user_data['age'],
            user_data['timestamp']
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç—Ä–µ–∫–∞
        for i in range(1, len(track_data) + 1):
            user_info.append(ratings.get(str(i), ''))
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        for row_idx, value in enumerate(user_info, start=1):
            worksheet.update_cell(row_idx, next_col, value)
        
        print(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫–æ–ª–æ–Ω–∫—É {next_col}")
        return True
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Google –¢–∞–±–ª–∏—Ü—É: {e}")
        return False

def prepare_spreadsheet():
    """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è
        if not worksheet.get_all_values():
            headers = ['User ID', 'Username', 'Gender', 'Age', 'Timestamp']
            for i in range(1, len(track_data) + 1):
                headers.append(f'Track {i}')
            worksheet.update('A1', [headers])
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–æ–º–µ—Ä–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–æ–≤
            for num, title in track_data.items():
                row = int(num) + 1  # +1 –ø–æ—Ç–æ–º—É —á—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–≥–æ–ª–æ–≤–∫–∏
                worksheet.update_cell(row, 1, f"Track {num}")
                worksheet.update_cell(row, 2, title)
                
        print("–¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞ ===
@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    user_states[chat_id] = {
        'user_id': chat_id,
        'username': message.from_user.username,
        'first_name': message.from_user.first_name,
        'last_name': message.from_user.last_name,
        'ratings': {},
        'current_track': 1,
        'start_time': datetime.now()
    }
    
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üéµ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", callback_data="start_test"))
    bot.send_message(chat_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", reply_markup=kb)

@bot.callback_query_handler(func=lambda call: call.data == "start_test")
def start_test(call):
    chat_id = call.message.chat.id
    bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=None)
    ask_gender(chat_id)

def ask_gender(chat_id):
    kb = types.InlineKeyboardMarkup()
    kb.row(types.InlineKeyboardButton("–ú—É–∂—Å–∫–æ–π", callback_data="gender_M"))
    kb.row(types.InlineKeyboardButton("–ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_F"))
    bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data.startswith("gender_"))
def handle_gender(c):
    chat_id = c.message.chat.id
    user_states[chat_id]['gender'] = c.data.split('_')[1]
    bot.delete_message(chat_id, c.message.message_id)
    ask_age(chat_id)

def ask_age(chat_id):
    kb = types.InlineKeyboardMarkup(row_width=2)
    ages = ["–¥–æ 24", "25-34", "35-44", "45-54", "55+"]
    for age in ages:
        kb.add(types.InlineKeyboardButton(age, callback_data=f"age_{age}"))
    bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data.startswith("age_"))
def handle_age(c):
    chat_id = c.message.chat.id
    user_states[chat_id]['age'] = c.data.split('_')[1]
    bot.delete_message(chat_id, c.message.message_id)
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    prepare_spreadsheet()
    
    bot.send_message(chat_id, "üéµ –ù–∞—á–∏–Ω–∞–µ–º –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç!\n\n–û—Ü–µ–Ω–∏—Ç–µ –∫–∞–∂–¥—ã–π —Ç—Ä–µ–∫ –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥")
    send_track(chat_id)

def send_track(chat_id):
    track_num = user_states[chat_id]['current_track']
    file_path = os.path.join(AUDIO_FOLDER, f"{track_num:03d}.mp3")
    
    if not os.path.exists(file_path):
        # –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω
        user_data = user_states[chat_id]
        user_data['timestamp'] = datetime.now().isoformat()
        user_data['end_time'] = datetime.now()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google –¢–∞–±–ª–∏—Ü—É
        success = save_to_google_sheets(user_data, user_data['ratings'])
        
        if success:
            bot.send_message(chat_id, "üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Google –¢–∞–±–ª–∏—Ü—É.")
        else:
            bot.send_message(chat_id, "‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.")
        
        return

    try:
        with open(file_path, 'rb') as audio_file:
            bot.send_audio(chat_id, audio_file, caption=f"–¢—Ä–µ–∫ #{track_num}")
    except Exception as e:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–∞: {e}")
        return

    kb = types.InlineKeyboardMarkup(row_width=5)
    for i in range(1, 6):
        kb.add(types.InlineKeyboardButton(f"{i}‚òÖ", callback_data=f"rate_{i}"))
    bot.send_message(chat_id, "–û—Ü–µ–Ω–∏—Ç–µ —Ç—Ä–µ–∫:", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data.startswith("rate_"))
def handle_rating(c):
    chat_id = c.message.chat.id
    rating = int(c.data.split('_')[1])
    track_num = user_states[chat_id]['current_track']
    
    user_states[chat_id]['ratings'][str(track_num)] = rating
    user_states[chat_id]['current_track'] += 1
    
    bot.delete_message(chat_id, c.message.message_id)
    send_track(chat_id)

@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    bot.send_message(message.chat.id, "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /start")

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
