import telebot
import csv
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import os
from telebot import types

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = '8109304672:AAHkOQ8kzQLmHupii78YCd-1Q4HtDKWuuNk'
AUDIO_FOLDER = 'audio'
SPREADSHEET_NAME = 'music_testing'
WORKSHEET_NAME = 'track_list'

# === Google Sheets –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ===
scope = ["https://spreadsheets.google.com/feeds", 
         "https://www.googleapis.com/auth/drive",
         "https://www.googleapis.com/auth/spreadsheets"]
creds = ServiceAccountCredentials.from_json_keyfile_name("creds.json", scope)
client = gspread.authorize(creds)
sheet = client.open(SPREADSHEET_NAME).worksheet(WORKSHEET_NAME)

# === –ó–∞–≥—Ä—É–∑–∫–∞ CSV-—Ñ–∞–π–ª–∞ —Å —Ç—Ä–µ–∫–∞–º–∏ ===
with open('track_list.csv', newline='', encoding='utf-8') as f:
    reader = csv.DictReader(f)
    track_data = {row['track_number']: row['title'] for row in reader}

# === –ë–æ—Ç ===
bot = telebot.TeleBot(TOKEN)

# === –°–ª–æ–≤–∞—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è ===
user_progress = {}        # –∫–∞–∫–æ–π —Ç—Ä–µ–∫ —É –∫–æ–≥–æ —Å–µ–π—á–∞—Å
user_rated_tracks = {}    # —á—Ç–æ —É–∂–µ –æ—Ü–µ–Ω–µ–Ω–æ
user_metadata = {}        # –ø–æ–ª/–≤–æ–∑—Ä–∞—Å—Ç
user_column = {}          # —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
last_audios = {}          # message_id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞—É–¥–∏–æ

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
def prepare_spreadsheet():
    """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –æ–Ω–∞ –ø—É—Å—Ç–∞—è"""
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    headers = sheet.row_values(1)
    if not headers:
        sheet.update('A1', ['Track Number', 'Track Title'])
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–æ–º–µ—Ä–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–æ–≤ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    all_values = sheet.get_all_values()
    if len(all_values) < 3:  # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–ª–∏ –ø—É—Å—Ç–æ
        for num, title in track_data.items():
            row = int(num) + 2  # +2 –ø–æ—Ç–æ–º—É —á—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–≥–æ–ª–æ–≤–∫–∏, –≤—Ç–æ—Ä–∞—è - –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—è
            sheet.update_cell(row, 1, num)
            sheet.update_cell(row, 2, title)

def get_next_available_column():
    """–ù–∞—Ö–æ–¥–∏—Ç —Å–ª–µ–¥—É—é—â–∏–π —Å–≤–æ–±–æ–¥–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü"""
    headers = sheet.row_values(1)
    return len(headers) + 1 if headers else 3

def setup_user_column(chat_id, username):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    col = get_next_available_column()
    user_column[chat_id] = col
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–æ–ª–±—Ü–∞ (username –∏–ª–∏ user_id)
    header_text = f"@{username}" if username else f"user_{chat_id}"
    sheet.update_cell(1, col, header_text)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    sheet.update_cell(2, col, f"{user_metadata[chat_id]['gender']}, {user_metadata[chat_id]['age']}")
    
    return col

# === –û–ø—Ä–æ—Å –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º ===
@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    welcome_handler(message)

@bot.message_handler(func=lambda message: message.chat.id not in user_metadata)
def welcome_handler(message):
    chat_id = message.chat.id

    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ –±—ã–ª–∞
    remove_kb = types.ReplyKeyboardRemove()
    bot.send_message(chat_id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç!", reply_markup=remove_kb)

    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–æ–π
    welcome_text = (
        "–¢—ã —É—Å–ª—ã—à–∏—à—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ç—Ä–µ–∫–æ–≤. –û—Ü–µ–Ω–∏ –∫–∞–∂–¥—ã–π –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5:\n\n"
        "–ù–æ —Å–Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è üôÇ"
    )

    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å", callback_data="start_test"))

    bot.send_message(chat_id, welcome_text, reply_markup=kb)
    user_metadata[chat_id] = {}  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å"
@bot.callback_query_handler(func=lambda call: call.data == 'start_test')
def handle_start_button(call):
    chat_id = call.message.chat.id

    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É (–æ—Å—Ç–∞–≤–ª—è—è —Å–æ–æ–±—â–µ–Ω–∏–µ)
    bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=None)

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    prepare_spreadsheet()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
    user_metadata[chat_id] = {}
    user_progress[chat_id] = 1  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ —Ç—Ä–µ–∫–∞
    user_rated_tracks[chat_id] = set()
    ask_gender(chat_id)

# –ó–∞–ø—Ä–æ—Å –ø–æ–ª–∞
def ask_gender(chat_id):
    kb = types.InlineKeyboardMarkup()
    kb.add(
        types.InlineKeyboardButton("–ú—É–∂—Å–∫–æ–π", callback_data="gender_M"),
        types.InlineKeyboardButton("–ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_F")
    )
    bot.send_message(chat_id, "–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data.startswith("gender_"))
def handle_gender(c):
    chat_id = c.message.chat.id
    user_metadata[chat_id]['gender'] = c.data.split('_',1)[1]
    bot.delete_message(chat_id, c.message.message_id)
    ask_age(chat_id)

def ask_age(chat_id):
    opts = ["–¥–æ 24", "25-34", "35-44", "45-54", "55+"]
    kb = types.InlineKeyboardMarkup(row_width=3)
    for o in opts:
        kb.add(types.InlineKeyboardButton(o, callback_data=f"age_{o}"))
    bot.send_message(chat_id, "–£–∫–∞–∂–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data.startswith("age_"))
def handle_age(c):
    chat_id = c.message.chat.id
    user_metadata[chat_id]['age'] = c.data.split('_',1)[1]
    bot.delete_message(chat_id, c.message.message_id)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    username = c.from_user.username
    col = setup_user_column(chat_id, username)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    bot.send_message(chat_id, "üéµ –ù–∞—á–∏–Ω–∞–µ–º –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç!\n\n–û—Ü–µ–Ω–∏ –∫–∞–∂–¥—ã–π —Ç—Ä–µ–∫ –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5:\n\n1 ‚òÖ - –°–æ–≤—Å–µ–º –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è\n2 ‚òÖ‚òÖ - –°–∫–æ—Ä–µ–µ –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è\n3 ‚òÖ‚òÖ‚òÖ - –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ\n4 ‚òÖ‚òÖ‚òÖ‚òÖ - –ù—Ä–∞–≤–∏—Ç—Å—è\n5 ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ - –û—á–µ–Ω—å –Ω—Ä–∞–≤–∏—Ç—Å—è")
    send_next_track(chat_id)

# === –û—Ç–ø—Ä–∞–≤–∫–∞ –∏ –æ—Ü–µ–Ω–∫–∞ —Ç—Ä–µ–∫–æ–≤ ===
def send_next_track(chat_id):
    n = user_progress.get(chat_id, 1)
    path = os.path.join(AUDIO_FOLDER, f"{n:03}.mp3")
    
    if not os.path.exists(path):
        # –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", callback_data="restart"))
        bot.send_message(chat_id, "üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –ø–æ–¥–∞—Ä–∫–æ–≤!", reply_markup=kb)
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ
    try:
        with open(path, 'rb') as f:
            m = bot.send_audio(chat_id, f, caption=f"–¢—Ä–µ–∫ ‚Ññ{n}")
            last_audios[chat_id] = m.message_id
    except Exception as e:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–µ–∫–∞: {e}")
        return

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
    kb = types.InlineKeyboardMarkup(row_width=5)
    buttons = []
    for i in range(1, 6):
        buttons.append(types.InlineKeyboardButton(str(i), callback_data=f"rate_{i}"))
    kb.add(*buttons)
    bot.send_message(chat_id, "–û—Ü–µ–Ω–∏—Ç–µ —ç—Ç–æ—Ç —Ç—Ä–µ–∫:", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data.startswith("rate_"))
def handle_rate(c):
    chat_id = c.message.chat.id
    n = user_progress.get(chat_id, 1)
    
    if n in user_rated_tracks[chat_id]:
        bot.answer_callback_query(c.id, "–≠—Ç–æ—Ç —Ç—Ä–µ–∫ —É–∂–µ –æ—Ü–µ–Ω–µ–Ω", show_alert=True)
        return

    score = c.data.split('_', 1)[1]
    col = user_column.get(chat_id)
    
    if not col:
        bot.answer_callback_query(c.id, "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É –≤ Google –¢–∞–±–ª–∏—Ü—É (—Å—Ç—Ä–æ–∫–∞ = –Ω–æ–º–µ—Ä —Ç—Ä–µ–∫–∞ + 2)
    try:
        sheet.update_cell(n + 2, col, score)
    except Exception as e:
        bot.answer_callback_query(c.id, f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}", show_alert=True)
        return

    user_rated_tracks[chat_id].add(n)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞—É–¥–∏–æ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
    try:
        bot.delete_message(chat_id, last_audios[chat_id])
    except:
        pass
    try:
        bot.delete_message(chat_id, c.message.message_id)
    except:
        pass

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç—Ä–µ–∫—É
    user_progress[chat_id] = n + 1
    send_next_track(chat_id)

@bot.callback_query_handler(func=lambda c: c.data == "restart")
def handle_restart(c):
    chat_id = c.message.chat.id
    bot.delete_message(chat_id, c.message.message_id)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if chat_id in user_metadata:
        del user_metadata[chat_id]
    if chat_id in user_progress:
        del user_progress[chat_id]
    if chat_id in user_rated_tracks:
        del user_rated_tracks[chat_id]
    if chat_id in user_column:
        del user_column[chat_id]
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–Ω–æ–≤–æ
    welcome_handler(c.message)

@bot.message_handler(func=lambda m: True)
def fallback(m):
    bot.send_message(m.chat.id, "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /start")

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    bot.polling(none_stop=True)
