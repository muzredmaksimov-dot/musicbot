import telebot
from telebot import types
import openpyxl
import os
import threading
from flask import Flask

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = "8109304672:AAHkOQ8kzQLmHupii78YCd-1Q4HtDKWuuNk"
bot = telebot.TeleBot(TOKEN)

FILE_NAME = "results.xlsx"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º
if not os.path.exists(FILE_NAME):
    wb = openpyxl.Workbook()
    ws = wb.active
    ws.title = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã"
    ws.append(["ChatID", "–ü–æ–ª", "–í–æ–∑—Ä–∞—Å—Ç", "–û—Ü–µ–Ω–∫–∞"])
    wb.save(FILE_NAME)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
user_metadata = {}
user_progress = {}
user_rated_tracks = {}

# === –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ===
@bot.message_handler(func=lambda message: message.chat.id not in user_metadata)
def welcome_handler(message):
    chat_id = message.chat.id
    bot.send_message(
        chat_id,
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç!\n\n"
        "–¢—ã —É—Å–ª—ã—à–∏—à—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ç—Ä–µ–∫–æ–≤. "
        "–û—Ü–µ–Ω–∏ –∫–∞–∂–¥—ã–π –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5:\n\n"
        "1. –ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è\n"
        "2. –†–∞–Ω—å—à–µ –Ω—Ä–∞–≤–∏–ª–∞—Å—å, –Ω–æ –Ω–∞–¥–æ–µ–ª–∞\n"
        "3. –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ\n"
        "4. –ù—Ä–∞–≤–∏—Ç—Å—è\n"
        "5. –õ—é–±–∏–º–∞—è –ø–µ—Å–Ω—è\n\n"
        "–ù–æ —Å–Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è üôÇ"
    )

    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å", callback_data="start_test"))
    user_metadata[chat_id] = None

@bot.callback_query_handler(func=lambda call: call.data == "start_test")
def handle_start_button(call):
    chat_id = call.message.chat.id
    bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=None)
    user_metadata[chat_id] = {}
    user_progress[chat_id] = 0
    user_rated_tracks[chat_id] = set()
    ask_gender(chat_id)

# === –ü–æ–ª ===
def ask_gender(chat_id):
    kb = types.InlineKeyboardMarkup()
    kb.add(
        types.InlineKeyboardButton("–ú—É–∂—Å–∫–æ–π", callback_data="gender_M"),
        types.InlineKeyboardButton("–ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_F"),
    )
    bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=kb)

@bot.callback_query_handler(func=lambda call: call.data.startswith("gender_"))
def handle_gender(call):
    chat_id = call.message.chat.id
    gender = "–ú" if call.data == "gender_M" else "–ñ"
    user_metadata[chat_id]["gender"] = gender
    bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=None)
    ask_age(chat_id)

# === –í–æ–∑—Ä–∞—Å—Ç ===
def ask_age(chat_id):
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏:")

@bot.message_handler(func=lambda message: message.chat.id in user_metadata and "gender" in user_metadata[message.chat.id] and "age" not in user_metadata[message.chat.id])
def handle_age(message):
    chat_id = message.chat.id
    if not message.text.isdigit():
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏ üôÇ")
        return
    age = int(message.text)
    user_metadata[chat_id]["age"] = age
    bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –Ω–∞—á–Ω–µ–º —Ç–µ—Å—Ç üéß")
    ask_rating(chat_id)

# === –û—Ü–µ–Ω–∫–∞ ===
def ask_rating(chat_id):
    kb = types.InlineKeyboardMarkup()
    for i in range(1, 6):
        kb.add(types.InlineKeyboardButton(str(i), callback_data=f"rate_{i}"))
    bot.send_message(chat_id, "–û—Ü–µ–Ω–∏—Ç–µ —ç—Ç–æ—Ç —Ç—Ä–µ–∫:", reply_markup=kb)

@bot.callback_query_handler(func=lambda call: call.data.startswith("rate_"))
def handle_rating(call):
    chat_id = call.message.chat.id
    rating = int(call.data.split("_")[1])

    gender = user_metadata[chat_id].get("gender", "")
    age = user_metadata[chat_id].get("age", "")

    wb = openpyxl.load_workbook(FILE_NAME)
    ws = wb.active
    ws.append([chat_id, gender, age, rating])
    wb.save(FILE_NAME)

    bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=None)
    bot.send_message(chat_id, f"–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {rating}")

    ask_rating(chat_id)  # –ø–æ–∫–∞ –∑–∞—Ü–∏–∫–ª–µ–Ω–æ, –º–æ–∂–Ω–æ –ø–æ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å

# === Flask —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ===
app = Flask(__name__)

@app.route("/")
def home():
    return "Bot is running!"

def run_flask():
    app.run(host="0.0.0.0", port=10000)

if __name__ == "__main__":
    threading.Thread(target=run_flask).start()
    bot.polling(none_stop=True, interval=0)
