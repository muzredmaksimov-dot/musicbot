import telebot
from telebot import types
import os
import csv
from flask import Flask, send_file, request

# üîë –î–∞–Ω–Ω—ã–µ —Ç–≤–æ–µ–≥–æ –±–æ—Ç–∞
TOKEN = "8109304672:AAHkOQ8kzQLmHupii78YCd-1Q4HtDKWuuNk"
ADMIN_ID = 866964827  # –¢–≤–æ–π Telegram ID

bot = telebot.TeleBot(TOKEN)
server = Flask(__name__)

# üìÇ –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è CSV
CSV_FILE = "backup_results.csv"

# üéµ –¢—Ä–µ–∫–∏ (001‚Äì030)
tracks = [f"{i:03}.mp3" for i in range(1, 31)]

# üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_progress = {}

# üìå –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ CSV
def save_answer_to_csv(user_data, track, rating):
    file_exists = os.path.exists(CSV_FILE)

    with open(CSV_FILE, mode="a", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)

        if not file_exists:
            headers = ['User ID', 'Username', 'First Name', 'Gender', 'Age', 'Track', 'Rating']
            writer.writerow(headers)

        row = [
            user_data.get('user_id', ''),
            f"@{user_data['username']}" if user_data.get('username') else '',
            user_data.get('first_name', ''),
            user_data.get('gender', ''),
            user_data.get('age', ''),
            track,
            rating
        ]
        writer.writerow(row)

# üöÄ –°—Ç–∞—Ä—Ç
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    user_progress[user_id] = {
        "current_track": 0,
        "data": {
            "user_id": user_id,
            "username": message.from_user.username,
            "first_name": message.from_user.first_name,
            "gender": "M",      # üëà –ø–æ–∫–∞ —Ñ–∏–∫—Å–∏—Ä—É–µ–º –ø–æ–ª
            "age": "45-54"      # üëà –∏ –≤–æ–∑—Ä–∞—Å—Ç
        }
    }

    bot.send_message(
        user_id,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üé∂\n\n"
        "–í—ã –±—É–¥–µ—Ç–µ —Å–ª—É—à–∞—Ç—å —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã —Ç—Ä–µ–∫–æ–≤ –∏ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –∏—Ö –æ—Ç 1 –¥–æ 5.\n\n"
        "–û—Ü–µ–Ω–∫–∏:\n"
        "1 ‚Äì —É–∂–∞—Å–Ω–æ ‚ùå\n"
        "2 ‚Äì –ø–ª–æ—Ö–æ üëé\n"
        "3 ‚Äì –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ üòê\n"
        "4 ‚Äì —Ö–æ—Ä–æ—à–æ üëç\n"
        "5 ‚Äì —Å—É–ø–µ—Ä üî•\n\n"
        "–ü–æ–µ—Ö–∞–ª–∏!"
    )
    send_next_track(user_id)

# ‚ñ∂Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç—Ä–µ–∫–∞
def send_next_track(user_id):
    progress = user_progress[user_id]
    track_index = progress['current_track']

    if track_index >= len(tracks):
        bot.send_message(user_id, "‚úÖ –°–ø–∞—Å–∏–±–æ! –í—ã –ø—Ä–æ—Å–ª—É—à–∞–ª–∏ –≤—Å–µ —Ç—Ä–µ–∫–∏.")
        return

    track_file = tracks[track_index]
    progress['current_track'] += 1

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫
    with open(track_file, "rb") as audio:
        bot.send_audio(user_id, audio, caption=f"–¢—Ä–µ–∫ {track_file}")

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("1", "2", "3", "4", "5")
    bot.send_message(user_id, "–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞:", reply_markup=markup)

# ‚≠ê –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏
@bot.message_handler(func=lambda message: message.text in ['1', '2', '3', '4', '5'])
def handle_rating(message):
    user_id = message.from_user.id
    rating = int(message.text)

    if user_id not in user_progress:
        return

    track_number = tracks[user_progress[user_id]['current_track'] - 1]
    user_data = user_progress[user_id]['data']

    # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
    save_answer_to_csv(user_data, track_number, rating)

    # –°–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫
    send_next_track(user_id)

# üìÇ –û—Ç–ø—Ä–∞–≤–∫–∞ CSV –ø–æ /results
@bot.message_handler(commands=['results'])
def send_results(message):
    if message.from_user.id == ADMIN_ID:
        if os.path.exists(CSV_FILE):
            bot.send_document(message.chat.id, open(CSV_FILE, "rb"))
        else:
            bot.send_message(message.chat.id, "‚ùå –§–∞–π–ª –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω.")
    else:
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º.")

# Flask webhook
@server.route('/' + TOKEN, methods=['POST'])
def getMessage():
    bot.process_new_updates([telebot.types.Update.de_json(request.stream.read().decode("utf-8"))])
    return "!", 200

@server.route("/")
def webhook():
    bot.remove_webhook()
    bot.set_webhook(url='https://musicbot-knqj.onrender.com/' + TOKEN)
    return "!", 200

if __name__ == "__main__":
    server.run(host="0.0.0.0", port=int(os.environ.get('PORT', 10000)))
